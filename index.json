[{"content":"Code for this blog post: Notebook Github Link Colab Basic: Predicting Original Distribution Vanilla Implementation What are Denoising Diffusion Models? Denoising Diffusion Models, commonly referred to as \u0026ldquo;Diffusion models\u0026rdquo;, are a class of generative models based on the Variational Auto Encoder (VAE) architecture. These models are called likelihood-based models because they assign a high likelihood to the observed data samples $p(X)$. In contrast to other generative models, such as GANs, which learn the sampling process of a complex distribution and are trained adversarially.\nThese models are currently the State of the art for image generation. Images generated by diffusion models are photo-realistic, we can even tell the model to generate objects by giving it prompts. Diffusion models can be used to generate distributions coming from non-image domains and have been successfully applied in speech1, NLP, time-series modelling etc. Survey of Applications 2 discusses various other areas in which diffusion models have been used.\nVAE\u0026rsquo;s Let\u0026rsquo;s spend a bit of time on VAEs, as it will help with some intuition. VAEs are unsupervised models that are used to learn a latent representation for an input. It\u0026rsquo;s an auto-encoder. VAEs are composed of two processes: an encoder ($q$) (also referred to as the inference model), which generates a latent representation ($z$) of the input data ($x_0$), and a decoder ($p$) (also referred to as the generator), which generates the input data ($\\hat x_0$) using the latent representation ($z$) as input. The encoder and decoder are trained together using a variational objective, referred to as the ELBO(Evidence Lower Bound). ELBO is a lower bound of the data likelihood $p(X)$.\nFigure 1: An architecture for a Variational Auto Encoder. (Image source: VAE tutorial, Kingma et.al; 2019)\nFigure 2: Graphical representation of a Variational Auto Encoder. The $p$ function is the decoder and the $q$ function is the encoder. (Image source: Calvin Luo; 2022)\nFigures 1 \u0026amp; 2 give a simplistic representation of a VAE model.\nDenoising Diffusion Models Analogous to VAEs, Denoising Diffusion models also consist of two processes: Diffusion, which is analogous to the VAE encoder, and Denoising, which is analogous to the VAE decoder.\nDiffusion - The diffusion process repeatedly samples random noise and corrupts our input data by adding the noise in $T$ steps. In contrast to the VAE encoder, we typically do not learn this process. At the end of diffusion, at step $T$, the data would be so corrupted that it\u0026rsquo;s just noise $N(0, I)$. Figure 3: Illustration of the Diffusion Process. Image of \u0026lsquo;Z\u0026rsquo; char is corrupted step by step.\nDenoising - The denoising is done by a learned model that takes completely noisy data and tries to generate the input data by repeatedly (over $t$ steps: $1$ to $T$) removing noise from the noisy data. Figure 4: Illustration of the Denoising Process. Image of \u0026lsquo;Z\u0026rsquo; character is generated step by step.\nThese models are able to generate images from pure noise.\nHumans paint, they are able to generate images in a stepwise manner by painting on a blank canvas. Diffusion models are similar, they generate images in a stepwise manner by denoising a noisy canvas.\nIntroduction to this series I have spent too much time understanding diffusion models, which started with some wild posts I saw on Twitter.\nIntroducing Imagen, a new text-to-image synthesis model that can generate high-fidelity, photorealistic images from a deep level of language understanding. Learn more and and check out some examples of #imagen at https://t.co/RhD6siY6BY pic.twitter.com/C8javVu3iW\n\u0026mdash; Google AI (@GoogleAI) May 24, 2022 Imagen Google AI Diffusion model. (Image source: Imagen Web Link)\nMy curiosity led to experiments, which enriched my ML skill-set. In this series, I will try to demystify some magic behind diffusion models. Finally read a tutorial on Diffusion models. Now, I understand how they work just not why they work. To me it\u0026#39;s crazy that they do. pic.twitter.com/LXm5OrD993\n\u0026mdash; Varun Tulsian (@varuntul22) October 5, 2022 Diffusion Models Series In this series, I will attempt to simplify diffusion model concepts and provide you with some code that you can easily run on Google Colab or your local Jupyter server. The code requires minimal setup. We will be working on a 2D dataset (generated using scikit-learn) and also the EMNIST dataset (28x28x1 images).\nThis is the first of 3 posts on diffusion models. You can check all the posts in the Full Diffusion Model Series. All the code for the diffusion model series is available here.\nThe first 2 parts of the series will focus on setting up the basic concepts and code. You won\u0026rsquo;t need a GPU to run the code. The code is written in PyTorch.\nPart 1: I will introduce the basics of the denoising approach for the diffusion model. We will predict the original distribution directly, following the first part of Luo, 2022.3\nPart 2: I will introduce optimizations, predicting error distribution, time step embedding Ala Attention is all you need4, that have been shown to work better. We will also look at class conditioned guidance (classifier free guidance) and steps to generate distributions faster using striding. This will correspond to the second part (Three Equivalent Interpretations) of Luo, 2022.3 Part 3: In the last part of the series, we will be using the concepts learned to implement diffusion models for character generation by training a U-Net model over the Extended-MNIST dataset. The code is written in JAX, Haiku. This may serve as a good introduction to Jax and Haiku for the uninitiated. In addition, I have also curated a list of high-quality blogs that I have found helpful, they can be found here.\nWhat are Diffusion Models? Let\u0026rsquo;s go over this again, this time in a little more detail. We will start seeing mathematical equations and PyTorch code below.\nFigure 5: Graphical representation of a Denoising Diffusion Model. The decoder is the $p$ function, the encoder is the $q$ function. (Image source: Calvin Luo; 2022)\nDenoising Diffusion models are a Markovian Hierarchical Variational Auto Encoder, unlike a standard VAE model the encoder process (diffusion) and the decoder process (denoising) occur in multiple steps. Figure 5 depicts the diffusion process ($q$), which begins with a random variable $x$ and generates random variables $x_t$ at the $t^{th}$ step. The denoising process ($p$) starts at $x_T$ and attempts to generate $\\hat x_t$ and ultimately $\\hat x_0$. Let\u0026rsquo;s call a step in the Diffusion Process as a Diffusion Step, and a step in the Denoising Process as a Denoising Step.\nWe will be going over the Diffusion Step and the Denoising Step, and the training procedure. But first, let\u0026rsquo;s build an understanding of what needs to be done to implement such a model.\nTraining a Denoising Diffusion model\nThis is the main source of confusion when it comes to understanding diffusion models. From the description above and the analogy with the VAEs, it would seem that training a diffusion model would consist of the following steps.\nUsing some data as an input ($x_0$) from the training data. Perform a Forward Pass (Diffusion), generating $x_t$\u0026rsquo;s in $T$ steps. Run the noisy image ($x_T$) to the Backward pass (Denoising) to get $\\hat x_0$ in $T$ steps. At each step using a $NN(\\hat x_t, t)$ and the output should be $\\hat x_{t-1}$. At the end of the full passes, performing a weight update of the model $NN$ after computing a loss-based $L(x_0, \\hat x_0)$. Repeat steps 1 through 4. This would be a perfectly valid approach, however, we can do much better ðŸ™ˆ. First, let\u0026rsquo;s investigate the issues with this approach. For every input in our dataset, this approach requires us to go through all the time steps, apply diffusion, and then go through the whole denoising steps. The learning (weight updates) only happen at the end of the both the passes. Training in such a way would be slow, and we would not be able to meaningfully learn anything useful.\nInstead, we can show that we can effectively learn the distribution $p(X)$ while just doing the following steps.\nUsing some data as an input ($x_0$) from the training data. Take uniform and random samples of a time variable $t$ ranging from $1,to,T$. Compute the latent variable $x_t$ in a single step. Refer to the diffusion step section. Apply the $NN$ model to the noisy image ($x_t$) to obtain $\\hat x_t^0$. The result of $NN(\\hat x_t, t)$ is $\\hat x_t^0$. We will not go over each time step. Refer to the diffusion step section. Note about notation: $\\hat x_t^0$ is the predicted reconstruction of the input $x_0$ at time step $t$.\nPerforming a weight update of the model $NN$ after computing a loss $L(x, \\hat x_t^0, t)$. Repeat steps 1 through 4. The proof requires us to reduce the ELBO loss, making use of the Markovian assumption in the diffusion model architecture, and using Monte-Carlo estimates to obtain an equivalent loss. I won\u0026rsquo;t go into details on this proof, please refer Section: Variational Diffusion Models, equation 100 gives the reduced loss 3. Would highly recommend you do.\nWe have made significant progress, now we don\u0026rsquo;t need to go over the entire forward and backward pass before making an update to the model. This will help speed up training significantly.\nWhen we want to generate a new data from noise, we would still go through the full denoising process as it\u0026rsquo;s helps with the quality of the samples. Generation of new samples through diffusion models is slow. This is an active area of research and various approaches have been proposed to this faster. In my code, I employ time step striding, where we take multiple steps at the same time.\nPseudocode:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 def diffusion(x_0, t): code to add noise to x_0 return x_i def training(): for loop until convergence: pick an image x_0 from X (batch of images) sample t from 1 to T x_t = diffusion_step(x_0, t) x_hat_t = NN(x_t, t) loss_ = loss(x_0, x_hat_t) update(NN, grad(loss_) # generating new data points through denoising steps def generate_new_data(): sample x_T from N(0, I) for t in range(T, 1): # denoising step x_hat_t = NN(x_t, t) # get x_{t-1} x_{t-1} = func(x_hat_t, t) # refer EQ - 12 x_hat_0 = x_0 1. Diffusion Step The Diffusion steps add noise to the input vector.\nAt each time step $t$ in the diffusion process, we sample from the latent variable $x_t$. One way to do this is the following \u0026ndash; $$ q_t(x_t|x_{t-1}) = N(\\sqrt\\alpha_tx_{t-1}, (1 - \\alpha_t )I) $$ Note: The diffusion process is annotated as $q$.\nAt each time step, we are only using $\\sqrt\\alpha$ times the previous signal $x_{t-1}$ and adds additional noise to the data in a way such that the latent variables stay at a similar scale. We have some additional conditions \u0026ndash;\n$\\alpha_t$, $t\\in[1, T]$, where $\\alpha_t \u0026lt; 1$, the diffusion schedule. $\\alpha_{t-1} \u0026lt; \\alpha_t$, as we go along in the diffusion process, we are adding more and more noise. At this point, let me introduce the re-parameterization trick. $$ N(\\sqrt\\alpha_tx_{t-1}, (1 - \\alpha_t )I) = \\sqrt\\alpha_tx_{t-1} + (1 - \\alpha_t)*\\epsilon \\quad with \\,\\, \\epsilon \\sim N(0, I) $$ The re-paremetarization trick simplifies sampling from a Gaussian distribution. If you want to sample from the diffusion step at $t$, you can simply sample from a standard Gaussian distribution $N(0, I)$ and plug in the mean and variance. Consider another interesting result: suppose we want to sample from the latent $x_t$ ($q(x_t|x_0)$) directly given only the input $x_0$ without having to do it in $t$ steps. We can do so using the re-parameterization trick.\n$$ \\begin{align} q(x_t|x_0) \u0026= N(\\sqrt\\alpha_tx_{t-1}, (1 - \\alpha_t )I) \\cr \u0026= \\sqrt\\alpha_t x_{t-1} + \\sqrt{(1-\\alpha_t)}\\ast\\epsilon_t \\cr \u0026= \\sqrt\\alpha_t(\\sqrt\\alpha_t x_{t-2} + \\sqrt{(1-\\alpha_{t-1})}\\ast\\epsilon_{t-1}) + \\sqrt(1-\\alpha_t)\\ast\\epsilon_t \\cr \u0026= \\sqrt\\alpha_t\\sqrt\\alpha_t x_{t-2} + \\sqrt\\alpha_t\\sqrt{(1-\\alpha_{t-1})}\\ast\\epsilon_{t-1} + \\sqrt(1-\\alpha_t)\\ast\\epsilon_t \\cr \u0026= \\sqrt\\alpha_t\\sqrt\\alpha_tx_{t-2} + \\sqrt{(1-\\alpha_t\\alpha_{t-1})}\\ast\\epsilon_{t-1}^\\ast \\quad where \\thinspace \\epsilon_{t-1}^\\ast\\in N(0, I) \\cr \u0026= ... \\cr \u0026= \\sqrt{\\bar\\alpha_t}x_0 + \\sqrt{(1 - \\bar\\alpha_t )}\\ast\\epsilon_0^\\ast ; where \\space \\bar\\alpha_t=\\Pi_{i=1}^T{\\sqrt\\alpha_i}, \\space \\epsilon_0^\\ast \\in N(0, I) \\cr \u0026= N(\\sqrt{\\bar\\alpha_t}x_0, (1 - \\bar\\alpha_t)I)\\cr \\end{align} $$ In equation 5, we have utilized sum of two independent Gaussian random variables.\nThe latent variable $x_t$ follows a Gaussian distribution, its mean is $\\sqrt{\\bar\\alpha_t}x_0$ and variance is $(1 - \\bar\\alpha_t)$. The mean is a function of time step $t$ and the input $x_0$, The variance is only a function of the time step.\nWith this in place, let\u0026rsquo;s put some code together.\nThe diffusion schedule: $\\alpha$\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 timestepts = 200 ## linear schedule def linear_beta_schedule(timesteps): beta_start = 0.0001 beta_end = 0.02 return jnp.linspace(beta_start, beta_end, timesteps) ## cosine schedule as proposed in https://arxiv.org/abs/2102.09672 ## The cosine schedule is recommened if timesteps \u0026gt;\u0026gt; 200. As it results in a gradual noisification of the input data def cosine_beta_schedule(timesteps, s=0.008): steps = timesteps + 1 x = jnp.linspace(0, timesteps, steps) alphas_cumprod = jnp.cos(((x / timesteps) + s) / (1 + s) * jnp.pi * 0.5) ** 2 alphas_cumprod = alphas_cumprod / alphas_cumprod[0] betas = 1 - (alphas_cumprod[1:] / alphas_cumprod[:-1]) return jnp.clip(betas, 0.0001, 0.1) ## some handy variables betas = linear_beta_schedule(timesteps) alphas = 1 - betas alphas_ = torch.cumprod(alphas, axis=0) variance = 1 - alphas_ sd = torch.sqrt(variance) import torch.nn.functional as F alphas_prev_ = F.pad(alphas_[:-1], [1, 0], \u0026#34;constant\u0026#34;, 1.0) Diffusion Step: Given input data $x_0$, a time step $t$ and a schedule, the diffusion method should return the latent variable $x_t$.\n1 2 3 4 5 6 # how to add noise to the data def get_noisy(batch, timestep): # we will use the reparameterization trick noise_at_t = torch.normal(0, std=1, size=batch.size()) added_noise_at_t = batch.mul(torch.sqrt(alphas_[timestep])) + noise_at_t.mul(sd[timestep]) return added_noise_at_t, noise_at_t In Variational Diffusion Models, Kingma et.al, 20225 propose a way to learn the parameters of the schedule and provide additional insights helpful in understanding diffusion models.\n2. Denoising Step Let\u0026rsquo;s recap, the denoising process ($p$) is responsible to generate synthetic data $\\hat x_0$.\nStart with a completely noisy data, $x_T = N(0, I)$ Perform a Denoising Step: Uses a Neural Network to predict $\\hat x_T^0$. We will use $\\hat x_T^0$ to generate the latent $\\hat x_{T-1}$. Repeat step 2 with input $\\hat x_{T-1}$ to get $\\hat x_{T-2}$ until t=1 Refer, our mathematical setup in Figure 5. Let\u0026rsquo;s look at the mathematical form that a denoising step $p(\\hat x_t|\\hat x_{t+1})$. This is also called the posterior distribution.\nBecause the diffusion process is well-defined, let\u0026rsquo;s work out what a backward transition in the diffusion process: $$ \\begin{align} q(x_t|x_{t+1}) = \\frac{q(x_t|x_{t-1})\\ast q(x_{t-1}|x_0)}{q(x_t|x_0)}\\quad \\text{Baye's theorem \\\u0026} \\, \\text{Note: } x_0 = x \\cr = ... \\cr \\varpropto N(x_{t-1};\\underbrace{\\frac{\\sqrt\\alpha_t(1-\\bar\\alpha_{t-1})x_t + \\sqrt{\\bar\\alpha_{t-1}}(1-\\alpha_t)x_0}{1-\\bar\\alpha_t}}_{\\mu_q(x_t,x_0)}, \\underbrace{\\frac{(1-\\alpha_t)(1-\\bar\\alpha_{t-1})}{1-\\bar\\alpha_t}I}_{\\sum_q(t)}) \\cr \\end{align} $$ For the full derivation please refer Equation #71; Calvin Luo\u0026rsquo;s tutorial3\nIt is convenient to assume that the denoising step $p(\\hat x_{t-1}|\\hat x_t)$ also follows a Gaussian distribution like the forward process $q(x_{t-1}|x_{t})$. Note: we don\u0026rsquo;t need to necessarily make this assumption. It\u0026rsquo;s an inductive bias that we are adding to the system and helps with the stability of training the model or help the model to converge faster.\nWe will assume the following \u0026ndash;\nThe mean $\\mu_{p(x_{t-1}|x_{t})}$ ($\\mu_p$ for short) is dependent on the input $x_0$ ($x_0$ is not known in the denoising step), thus the denoising Neural Network is tasked to make a prediction for the $\\hat x_t^0$. The variance is not dependent on the data. We will assume it\u0026rsquo;s fixed and is only a function of the time step, $\\sum_{p(x_{t-1}|x_t)} = \\sum_q(t)$. This gives us the following equation for the denoising step \u0026ndash; $$ \\begin{align} p(\\hat x_{t-1}| \\hat x_t) \\varpropto N(\\hat x_{t-1};\\frac{\\sqrt\\alpha_t(1-\\bar\\alpha_{t-1})\\hat x_t + \\sqrt{\\bar\\alpha_{t-1}}(1-\\alpha_t)\\hat x_t^0}{1-\\bar\\alpha_t}, \\frac{(1-\\alpha_t)(1-\\bar\\alpha_{t-1})}{1-\\bar\\alpha_t}I)\t\\end{align} $$ As show in Improved Denoising Diffusion Probabilistic Models.6 We could alternatively learn the posterior variance. In this case, we will make the neural network output the variance as well as the mean. If the data is d dimensional, the $NN$ will output 2d dimensions. First d dimensions for the mean, the 2nd d dimensions for the variance.\nDiffusion: With Fixed Variance:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # fixed posterior variance posterior_variance = (1 - alphas) * (1 - alphas_prev_) / (1 - alphas) def generate_data(denoising_model): # generating multiple samples at the same time batch_size_generation = 2048*5 # x_T -- we will start from a Noisy sample data_noisy = torch.normal(mean=0, std=1, size=(2, batch_size_generation)) for n in range(1, int(len(data_noisy[0])/batch_size_generation) + 1): data_in_batch = data_noisy[:, (n-1)*batch_size_generation:(n*batch_size_generation)] for t in range(1, timesteps): timestep = timesteps-t t_repeated = torch.Tensor([timestep]).repeat(batch_size_generation) data_stacked = torch.vstack([data_in_batch, t_repeated]) # x_hat_0 prediction at time t pred_data = denoising_model(data_stacked.T) # implementing equation above to get x_(t-1) from x_t and x_0 mean_data_1 = data_in_batch.T.mul(torch.sqrt(alphas[timestep])*(1-alphas_prev_[timestep])/(variance[timestep])) mean_data_2 = pred_data.mul(torch.sqrt(alphas_prev_[timestep])*(1-alphas[timestep])/(variance[timestep])) mean_data = mean_data_1.add(mean_data_2) posterior_data = posterior_variance[timestep] data_in_batch = torch.normal(mean_data, torch.sqrt(posterior_data)).T return data_in_batch 3. Training Procedure We have just defined the diffusion method in the pseudocode. Let\u0026rsquo;s define the loss function and the Neural Network.\nNeural Network:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 from torch import nn class DenoisingModelSequential(nn.Module): def __init__(self, hidden_units=32): super(DenoisingModelSequential, self).__init__() # hidden_units = 32 self.mlp = nn.Sequential( nn.Linear(3, int(hidden_units), bias=True), nn.GELU(), nn.Linear(int(hidden_units), int(hidden_units/2), bias=True), nn.GELU(), nn.Linear(int(hidden_units/2), int(hidden_units/4), bias=True), nn.GELU(), nn.Linear(int(hidden_units/4), int(hidden_units/8), bias=True), nn.GELU(), nn.Linear(int(hidden_units/8), int(hidden_units/16), bias=True), nn.GELU(), nn.Linear(int(hidden_units/16), int(hidden_units/8), bias=True), nn.GELU(), nn.Linear(int(hidden_units/8), int(hidden_units/4), bias=True), nn.GELU(), nn.Linear(int(hidden_units/4), int(hidden_units/2), bias=True), nn.GELU(), nn.Linear(int(hidden_units/2), int(hidden_units), bias=True), nn.GELU(), nn.Linear(int(hidden_units), 2, bias=True) ) def forward(self, x): x = self.mlp(x) return x denoising_model = DenoisingModelSequential(64) The input to the Neural Network is 3-dimensional. We are working with 2d dataset, so $\\hat x_t$\u0026rsquo;s is a 2d vector. In this blog post, we are going to pass $t$ as the 3rd dimension, we will pass it as a scalar. In the subsequent posts, we will see how to generate an embedding for a time step and concatenate/fuse it with the input. The output of the $NN$ needs to be $\\hat x_t^0$ which is a 2d vector. Refer to the denoising step section. The $NN$ architecture doesn\u0026rsquo;t really matter. In this case, I\u0026rsquo;ve used a basic Multi Layer Perceptron with GeLU activation units7. We will use a U-net architecture for character generation using the EMNIST dataset. Checkout Part 3.\nLoss Function: At time step $t$ the loss is defined as follows $$ Loss(x_0, \\hat x_t, t) = 1/2\\ast(\\frac{\\bar\\alpha_{t-1}}{1-\\bar\\alpha_{t-1}} - \\frac{\\bar\\alpha_t}{1-\\bar\\alpha_t})\\ast\\mid\\mid x_0-\\hat x_0^t\\mid\\mid_2^2 $$ $$ \\text{SNR}_t =\\frac{\\bar\\alpha_t}{1-\\bar\\alpha_t} $$ SNR stands for Signal to Noise. In the case of the diffusion, the schedule must be chosen such that $SNR_t \u0026lt; SNT_{t-1}$.\nLoss:\n1 2 3 4 5 6 # instead of the l2 loss, I use the huber loss # https://pytorch.org/docs/stable/generated/torch.nn.HuberLoss.html loss_func = nn.HuberLoss() imp_weight = torch.sqrt(1/2 * ((alphas_prev_[timestep] / (1 - alphas_prev_[timestep])) - (alphas_[timestep]/(1 - alphas_[timestep])))) loss_ = loss_func(data_in_batch.mul(imp_weight), pred_data.T.mul(imp_weight)) In Variation Diffusion Models5, authors propose using a separate Neural Network to model SNR as a function of $t$. The Neural Network should be monotonically decreasing. In this setting, we do not need to specify the diffusion schedule, it will be learned along with the diffusion model.\nLet\u0026rsquo;s look at some outputs In this blog post, we will play with some 2d data-points.\nGenerating data set for training:\n1 2 3 samples = 1024*128 x = torch.normal(mean=0, std=4, size=(1, samples)) y = torch.normal(mean=0.25*torch.ones(samples)*x*x, std=torch.ones(samples)*1) 1 2 3 circles, _ = datasets.make_circles(1024*128, noise=0.01, factor=0.1, shuffle=True) make_moons, labels = datasets.make_moons(n_samples=1024*128, noise=0.01) complex_data = numpy.hstack([make_moons + 15, circles ]) With the code fragments in the blog, you should be able to build your very own diffusion model. You can find the Jupyter Notebook here in case you need some help.\nTraining Data compared to Diffusion generated data:\nLet\u0026rsquo;s look at data I was able to generate using concepts discussed in this blog.\nFigure 6: 2D Parabola vs Diffusion generated.\nFigure 7: 2D Complex vs Diffusion generated.\nFigure 8: A GIF show-casing the denoising process; We start from complete noise and make small improvements step by step.\nSee you in the next part.\nPopov et al. 2021 Grad-TTS: A Diffusion Probabilistic Model for Text-to-Speech\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nYang et al. 2022 Diffusion Models: A Comprehensive Survey of Methods and Applications\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nCalvin Luo; 2019 \u0026ldquo;Understanding Diffusion Models: A Unified Perspective\u0026rdquo;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nVaswani et al. 2017 Attention is all you need\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nKingma et al. 2022 \u0026ldquo;Variational Diffusion Models\u0026rdquo;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nNichol et al. 2021 Improved Denoising Diffusion Probabilistic Models\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nHendrycks et al. 2016 Gelu\u0026rsquo;s\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://varun-ml.github.io/posts/diffusion-models/denoising-diffusion-models-1/","summary":"Code for this blog post: Notebook Github Link Colab Basic: Predicting Original Distribution Vanilla Implementation What are Denoising Diffusion Models? Denoising Diffusion Models, commonly referred to as \u0026ldquo;Diffusion models\u0026rdquo;, are a class of generative models based on the Variational Auto Encoder (VAE) architecture. These models are called likelihood-based models because they assign a high likelihood to the observed data samples $p(X)$. In contrast to other generative models, such as GANs, which learn the sampling process of a complex distribution and are trained adversarially.","title":"Denoising Diffusion Models Part 1: Estimating True Distribution"},{"content":"Code for this blog post: Notebook Github Link Colab Predicting Error and Score Function Error / Score Prediction Classifier free Guidance and other improvements Advanced concepts Topics to cover We have done most of the heavy-lifting in Part 1 of this series on Diffusion Models. To be able to use them well in practice, we may need to make some more improvements. That\u0026rsquo;s what we will do.\nTime step embedding and concatenation/fusion to the input data. Error Prediction $\\hat \\epsilon_0^\\ast$ and Score Function Prediction $s$ instead of predicting the actual input $x_0$. Class conditioned generation or Classifier free guidance, where we guide the diffusion model to generate data based on class labels. The ideas are an extension to the concepts introduced earlier, but are vital parts of any practical diffusion model implementation.\nTime Step Embedding During the denoising process, the Neural Network needs to know the time step at which denoising is being done. Passing the time step $t$ as a scalar value is not ideal. Rather, it would be preferable to pass the time step as an embedding to the Neural Network. In the Attention is all you need1 paper, the authors proposed sinusoidal embeddings to encode position of the tokens (time steps in our case).\nPseudocode:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import math # adapted from HuggingFace -- https://huggingface.co/blog/annotated-diffusion class SinusoidalPositionEmbeddings(nn.Module): def __init__(self, dim): super().__init__() self.dim = dim def forward(self, time): half_dim = self.dim // 2 # embedding values need to be small embeddings = math.log(10000) / (half_dim - 1) embeddings = torch.exp(torch.arange(half_dim) * -embeddings) embeddings = time[:, None] * embeddings[None, :] embeddings = torch.cat((embeddings.sin(), embeddings.cos()), dim=-1) return embeddings # generate 8 dimensional time step embeddings sinusoidalPositionEmbeddings = SinusoidalPositionEmbeddings(8) Sinusoidal embeddings are small in absolute value and can be fused(added) or concatenated to the input data to provide the Neural Network some information about the time step at which the denoising process is happening.\nPassing Time Step Embedding (Fusing and Concatenation):\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # MLP to project time step embedding before we pass it to the input self.position_mlp = nn.Sequential( nn.GELU(), nn.Linear(8, 2) # 2 is the input data dimension ) timestep_embeddings = position_embeddings[timestep.long()] time_embeddings = self.position_mlp(timestep_embeddings) # concatenation # x = (batch_size, input data dimension); time_embeddings = (batch_size, input data dimension) concat_xÂ =Â torch.cat((x, time_embeddings), dim=1) # fusing shift, scale = jnp.split(time_embedding, indices_or_sections=2, axis=-1) x = shift + (scale+1)*x Fusing the data with the data is computationally efficient as it requires significantly fewer number of weight parameters. The key idea here is that Neural Networks are powerful enough to separate any added information to the original data without the information being explicitly passed. Have a look at this video if you want to get better intuition. Positional embeddings in transformers EXPLAINED.\nIf we want to add time step information to an image, it is typically done by broadcasting the time step embedding along the channel dimension.\nAdding Time Step to Image (Fusing):\n1 2 3 4 5 6 7 8 9 # image batch data -- (batch_size, height, width, channels) # timestep embedding -- (batch_size, embedding_dimension) # ensure channels == embedding_dimension # broadcast and add timestep to image data import einops timestep_embeddingÂ =Â einops.rearrange(b,Â \u0026#39;bÂ cÂ -\u0026gt;Â bÂ 1Â 1Â c\u0026#39;) fused_image_data = image_data.add(timestep_embedding) Fusing data to an input is a technique useful to add any kind of conditional information to the data. We will use this idea in EMNIST: Blog 3 where we use this concept to fuse label and time step information with the images during class conditional generation. This technique was used in the work, Improved Denoising Diffusion Probabilistic Models.\nError Prediction and Score Function Prediction Predicting the Error $\\hat \\epsilon_0^\\ast$ During the denoising step, the model ingests $\\hat x_t$ and spits out $\\hat x_t^0$, a prediction for $x_0$. Instead of outputting predictions of the input data, we want the model to output a prediction of the error $\\hat\\epsilon^\\ast_0$.\nLet\u0026rsquo;s investigate the relationship between error $\\epsilon_0^\\ast$ and input data $x_0$. $$ \\begin{align} x_t \u0026= \\sqrt{\\bar\\alpha_t}x_0 + \\sqrt{(1 - \\bar\\alpha_t )}\\ast\\epsilon_0^\\ast \\cr x_0 \u0026= \\frac{x_t-\\sqrt{(1 - \\bar\\alpha_t )}\\ast\\epsilon_0^\\ast}{\\sqrt{\\bar\\alpha_t}} \\end{align} $$ Equation 2 shows that if we have $x_t$ and $\\epsilon^\\ast_0$ than it determines $x_0$.\nThe denoising step now looks like this \u0026ndash;\nMake a prediction of source error $\\hat\\epsilon^\\ast_0$ using the $NN(\\hat x_t, t)$. Using Equation 2, evaluate $x_0^t$, which is the prediction of the input data at time step $t$. Next step: During training: We want an equivalent version of the loss function $Error\\_Loss(\\epsilon^\\ast_0, \\hat \\epsilon_0^\\ast, t)$. $$ \\begin{align} Loss(x_0, \\hat x_t, t) = 1/2\\ast(\\frac{\\bar\\alpha_{t-1}}{1-\\bar\\alpha_{t-1}} - \\frac{\\bar\\alpha_t}{1-\\bar\\alpha_t})\\ast\\mid\\mid x_0-\\hat x_0^t\\mid\\mid_2^2 \\cr \\text{Making modifications to loss using Equation 2} \\nonumber \\cr Error\\_Loss(\\epsilon^\\ast_0, \\hat \\epsilon_0^\\ast, t) = \\frac{1}{2\\sigma^2_q(t)} \\frac{(1-\\alpha_t)^2}{(1-\\bar\\alpha_t)\\alpha_t}\\mid\\mid \\epsilon^\\ast_0-\\hat \\epsilon^\\ast_0\\mid\\mid_2^2 \\end{align} $$ During data generation: Using Equation 2, reconstruct $\\hat x_0^t$. Remember, $x_0$ is a function of the Gaussian error and the latent variable. Clip the $\\hat x_0^t$ to make sure it lies in the range of -1 to +1 (normalized range for input data). torch.clip(x_reconstructed, -1, 1) Using Equation 5 (below) get a prediction for the latent at $t-1$ time step. $$ \\begin{align} p(\\hat x_{t-1}| \\hat x_t) \\varpropto N(\\hat x_{t-1};\\frac{\\sqrt\\alpha_t(1-\\bar\\alpha_{t-1})\\hat x_t + \\sqrt{\\bar\\alpha_{t-1}}(1-\\alpha_t)\\hat x_t^0}{1-\\bar\\alpha_t}, \\frac{(1-\\alpha_t)(1-\\bar\\alpha_{t-1})}{1-\\bar\\alpha_t}I)\t\\end{align} $$ Predicting error is empirically shown to work well, refer Denoising paper2. This is probably due to the clipping of the predicted output at every time step so that the predicted data is in the normalized range. Refer this discussion.\nHere is an interesting discussion on why predicting error works for images, but may not work well for other domains such as voice generation.\nAnother important reason is that the standard formulation everyone has ended up using for images (predict the standardised noise given noisy input) implicitly downweights high frequency components, which is an excellent match for the human visual system.\n\u0026mdash; Sander Dieleman (@sedielem) August 11, 2022 Denoising Step during data generation:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 x_reconstructed = # data_in_batch is latent variable x at timestep data_in_batch.T.sub(pred_data.mul(sd[timestep])).div(torch.sqrt(alphas_[timestep])) if timestep \u0026gt;= 5: x_reconstructed = torch.clip(x_reconstructed, -1., 1.) mean_data_1 = data_in_batch.T.mul(mean_coeff_1[timestep]) mean_data_2 = x_reconstructed.mul(mean_coeff_2[timestep]) mean_data = mean_data_1.add(mean_data_2) posterior_data = posterior_variance_corrected[timestep] # data_in_batch is latent variable x at previous timestep data_in_batch = torch.normal(mean_data, torch.sqrt(posterior_data)).T Score Function Prediction This is yet another variation on diffusion models. Similar to predicting the error as discussed earlier, we could also predict the score function. The score function $s$ is defined as $\\nabla p(x_t)$.\nAll we need is to define $x_t$ as $f(s)$. We could then define a $Score\\_Loss(s, \\hat s, t)$ by substituting $x_t$ for the function $f(s)$ in the training step. In the denoising step we will use the function $f(s)$ defined to compute $x_t$, perform clipping so that the output lies in the normalized range and proceed as we did in the earlier section.\nThe relation between $s$ and $x$ is defined as below \u0026ndash; $$ x_0 = \\frac{x_t + (1 - \\bar\\alpha_t )\\ast\\nabla p(x_t)}{\\sqrt{\\bar\\alpha_t}} $$ For more details and intuition on why this is an important interpretation, please refer to the section on Three equivalent interpretations.3 Yang Song has an excellent blog post on Score based generative models.\nGuidance \u0026amp; Classifier-free Guidance We want to control the data we generate. For example, in the image below, we have 2 labels. During generation, we want to direct the model to generate samples either from Yellow or Purple classes. Classifier Guidance is a way to do this. We will be guiding the denoising process to generate samples that are more likely to belong to the conditioned class.\nFigure 1: Data with 2 labels, Circles in Purple and Moons in Yellow\nText-guided diffusion models like Glide use the powerful Neural Network called CLIP and classifier guidance techniques to perform text-based image generation.\nSo far, we have been trying to maximize the likelihood of the data distribution $p(x)$ with diffusion models. This allowed us to randomly sample data points from the data distribution. A naÃ¯ve idea to do class-conditioned generation could be to fuse the conditional label information with the input data.\nDuring training and data generation, we will add the conditioned label as an input along with the noisy data and the time step embedding. The output of the model will stay the same as earlier.\nThe conditioned data can be fused with the input data, just like we fused the time step information.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 # haiku code self.mlp = hk.Sequential([ hk.Linear(256), jax.nn.gelu, hk.Linear(256), ]) # conditional vectors encoding self.embedding_vectors = hk.Embed(10+26+26+1, 64) self.timestep_embeddings = TimeEmbeddings(64) # the diffusion model is given x, time step and label as input def __call__(self, x, timesteps, cond=None): cond_embedding = None conditioning = None if timesteps is not None: timestep_embeddings = self.timestep_embeddings(timesteps) conditioning = timestep_embeddings if cond is not None: label_embeddings = self.embedding_vectors(cond) conditioning = jnp.concatenate([label_embeddings, conditioning], axis=1) cond_embedding = self.mlp(conditioning) ... # fusing time step and label information with input x shift, scale = jnp.split(cond_embedding, indices_or_sections=2, axis=-1) x = shift + (scale+1)*x ... Guidance The above approach may lead to models that have low sample diversity. Researchers have proposed two other forms of guidance: classifier guidance and classifier-free guidance4.\nClassifier Guidance guides the generation of new samples with the help of a classifier. The classifier takes a noisy image ($x_t$) as input and predicts the label $y$. The gradient of the distribution $p(y|x)$ is used to make updates to the weights of the Neural Network to guide it to produce samples that are likely to be $y$. This is an adversarial loss, and this approach has similarities to GANs.\nClassifier-Free Guidance would be ideal if we did not want to build a classifier. The classifier-free guidance approach models the conditional likelihood of samples as follows: $$ \\nabla p(x|y) = \\lambda \\ast \\underbrace{\\nabla p(x|y)}_{\\text{conditional}} + (1-\\lambda) \\ast \\underbrace{\\nabla p(x)}_{\\text{unconditional}} $$ The conditional and the unconditional distributions are modelled by the same neural network. To model the conditional distribution, we fuse the label information as shown in the naÃ¯ve approach above. To model the unconditional distribution, we mask the label information and pass it to the diffusion model. The lambda parameter, controls the diversity of the sample we want to generate. $\\lambda=1$ would be equivalent to the naÃ¯ve approach.\nClassifier-free guidance is a cheatcode that makes these models perform as if they had 10x the parameters. At least in terms of sample quality, and at the cost of diversity. All of the recent spectacular results rely heavily on this trick.\n\u0026mdash; Sander Dieleman (@sedielem) August 11, 2022 Adding this perspective about efficiency of diffusion models. Even though to be honest, I am not sure myself :).\nLet\u0026rsquo;s look at some outputs Figure 8: A GIF show-casing the denoising process; Generating class conditioned samples over T time steps\nSee you in the next part.\nVaswani et al. 2017 \u0026ldquo;Attention is all you need\u0026rdquo;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nHo et al. 2020 \u0026ldquo;Denoising diffusion probabilistic models\u0026rdquo;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nCalvin Luo; 2019 \u0026ldquo;Understanding Diffusion Models: A Unified Perspective\u0026rdquo;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nHo et al. 2021 \u0026ldquo;Classifier-free diffusion guidance\u0026rdquo;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://varun-ml.github.io/posts/diffusion-models/denoising-diffusion-models-2/","summary":"Code for this blog post: Notebook Github Link Colab Predicting Error and Score Function Error / Score Prediction Classifier free Guidance and other improvements Advanced concepts Topics to cover We have done most of the heavy-lifting in Part 1 of this series on Diffusion Models. To be able to use them well in practice, we may need to make some more improvements. That\u0026rsquo;s what we will do.\nTime step embedding and concatenation/fusion to the input data.","title":"Denoising Diffusion Models Part 2: Improving Diffusion Models"},{"content":" Notebook Github Link Colab EMINST De-noising and Conditional generation Colab EMNIST ","permalink":"https://varun-ml.github.io/posts/diffusion-models/denoising-diffusion-models-3/","summary":" Notebook Github Link Colab EMINST De-noising and Conditional generation Colab EMNIST ","title":"Denoising Diffusion Models Part 3: Generating Characters and numbers with Diffusion Models"},{"content":"If you have suggestions, please feel free to contribute to Github Repo.\nNotebook Github Link Colab Basic: Predicting Original Distribution Vanilla Implementation Predicting Error and Score Function Error / Score Prediction Classifier free Guidance and other improvements Advanced concepts EMINST De-noising and Conditional generation Colab EMNIST ","permalink":"https://varun-ml.github.io/posts/diffusion-models/diffusion-models-notebooks/","summary":"If you have suggestions, please feel free to contribute to Github Repo.\nNotebook Github Link Colab Basic: Predicting Original Distribution Vanilla Implementation Predicting Error and Score Function Error / Score Prediction Classifier free Guidance and other improvements Advanced concepts EMINST De-noising and Conditional generation Colab EMNIST ","title":"Diffusion Model Jupyter and Colab Notebooks"},{"content":"Here are some resources that I have found useful/interesting. Highlighting ones that I recommend going over.\nPapers Paper Title Paper Link Have I Read it? DDPM DDMP Yeah Improved DDPM IDDPM Yeah Stable Diffusion Stable Diffusion No Variational Diffusion Models VDM Yeah Cold Diffusion Cold Diffusion No Understanding Diffusion Models: A Unified Perspective Tutorial Yeah Glide Glide No Blogs Author Description Link Lilian Weng Comprehensive coverage of Diffusion models theory (Advanced) lil\u0026rsquo;log diffusion models Yang Song This blog is about score based generative models, specifically about SDE\u0026rsquo;s (Advanced) score based generative models AI Summer School Easy to follow but comprehensive coverage of Diffusion models ai summer school Hugging Face Annotated discussion of diffusion model with code annotated diffusion models Alex Alemi Blog on Variational Diffusion Loss variational diffusion models YouTube Educators Channel Description Link AI Coffee Break with Letitia Byte sized content on Diffusion models diffusion models explained Yannic DDPM paper explained DDMP explained Aleksa GordiÄ‡ - The AI Epiphany ML coding series on Improved DDPM codebase coding series GitHub Repos Repo Description Repo Link Colab Stable Diffusion Stable Diffusion LucidRains Denoising Diffusion Models LucidRains Variational Diffusion models VDM DDPM DDPM YiYi XU (Flax+JAX) Flax Denoising Diffusion Glide Glide Notebooks Play with Diffusion Models Description Link Play with Stable Diffusion v2 SD II Stable Boost: Personalized Photos Stable Boost Image variations with Stable Diffusion SD variations ","permalink":"https://varun-ml.github.io/posts/diffusion-models/bonus-denoising-diffusion-models-resources/","summary":"Here are some resources that I have found useful/interesting. Highlighting ones that I recommend going over.\nPapers Paper Title Paper Link Have I Read it? DDPM DDMP Yeah Improved DDPM IDDPM Yeah Stable Diffusion Stable Diffusion No Variational Diffusion Models VDM Yeah Cold Diffusion Cold Diffusion No Understanding Diffusion Models: A Unified Perspective Tutorial Yeah Glide Glide No Blogs Author Description Link Lilian Weng Comprehensive coverage of Diffusion models theory (Advanced) lil\u0026rsquo;log diffusion models Yang Song This blog is about score based generative models, specifically about SDE\u0026rsquo;s (Advanced) score based generative models AI Summer School Easy to follow but comprehensive coverage of Diffusion models ai summer school Hugging Face Annotated discussion of diffusion model with code annotated diffusion models Alex Alemi Blog on Variational Diffusion Loss variational diffusion models YouTube Educators Channel Description Link AI Coffee Break with Letitia Byte sized content on Diffusion models diffusion models explained Yannic DDPM paper explained DDMP explained Aleksa GordiÄ‡ - The AI Epiphany ML coding series on Improved DDPM codebase coding series GitHub Repos Repo Description Repo Link Colab Stable Diffusion Stable Diffusion LucidRains Denoising Diffusion Models LucidRains Variational Diffusion models VDM DDPM DDPM YiYi XU (Flax+JAX) Flax Denoising Diffusion Glide Glide Notebooks Play with Diffusion Models Description Link Play with Stable Diffusion v2 SD II Stable Boost: Personalized Photos Stable Boost Image variations with Stable Diffusion SD variations ","title":"Denoising Diffusion Models Resources"},{"content":"Opening Links in New page Override default behaviour by adding a render-link.html file under layouts. Follow this page for more details.\nHandle Katex Create a shortcode for katex with {{ .Inner }}. This would ensure all text meant for Katex is not processed. Use shortcode \\{\\{\u0026lt; katex \u0026gt;\\}\\} before any katex code. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 \\{\\{\u0026lt; katex \u0026gt;\\}\\} # remove \\ here $$ \\begin{align} q(x_t|x_0) \u0026amp;= N(\\sqrt\\alpha_tx_{t-1}, (1 - \\alpha_t )I) \\cr \u0026amp;= \\sqrt\\alpha_t x_{t-1} + \\sqrt{(1-\\alpha_t)}\\ast\\epsilon_t \\cr \u0026amp;= \\sqrt\\alpha_t(\\sqrt\\alpha_t x_{t-2} + \\sqrt{(1-\\alpha_{t-1})}\\ast\\epsilon_{t-1}) + \\sqrt(1-\\alpha_t)\\ast\\epsilon_t \\cr \u0026amp;= \\sqrt\\alpha_t\\sqrt\\alpha_t x_{t-2} + \\sqrt\\alpha_t\\sqrt{(1-\\alpha_{t-1})}\\ast\\epsilon_{t-1} + \\sqrt(1-\\alpha_t)\\ast\\epsilon_t \\cr \u0026amp;= \\sqrt\\alpha_t\\sqrt\\alpha_tx_{t-2} + \\sqrt{(1-\\alpha_t\\alpha_{t-1})}\\ast\\epsilon_{t-1}^\\ast \\quad where \\thinspace \\epsilon_{t-1}^\\ast\\in N(0, I) \\cr \u0026amp;= ... \\cr \u0026amp;= \\sqrt{\\bar\\alpha_t}x_0 + \\sqrt{(1 - \\bar\\alpha_t )}\\ast\\epsilon_0^\\ast ; where \\space \\bar\\alpha_t=\\Pi_{i=1}^T{\\sqrt\\alpha_i}, \\space \\epsilon_0^\\ast \\in N(0, I) \\cr \u0026amp;= N(\\sqrt{\\bar\\alpha_t}x_0, (1 - \\bar\\alpha_t)I)\\cr \\end{align} $$ \\{\\{\u0026lt; /katex \u0026gt;\\}\\} # remove \\ here $$ \\begin{align} q(x_t|x_0) \u0026= N(\\sqrt\\alpha_tx_{t-1}, (1 - \\alpha_t )I) \\cr \u0026= \\sqrt\\alpha_t x_{t-1} + \\sqrt{(1-\\alpha_t)}\\ast\\epsilon_t \\cr \u0026= \\sqrt\\alpha_t(\\sqrt\\alpha_t x_{t-2} + \\sqrt{(1-\\alpha_{t-1})}\\ast\\epsilon_{t-1}) + \\sqrt(1-\\alpha_t)\\ast\\epsilon_t \\cr \u0026= \\sqrt\\alpha_t\\sqrt\\alpha_t x_{t-2} + \\sqrt\\alpha_t\\sqrt{(1-\\alpha_{t-1})}\\ast\\epsilon_{t-1} + \\sqrt(1-\\alpha_t)\\ast\\epsilon_t \\cr \u0026= \\sqrt\\alpha_t\\sqrt\\alpha_tx_{t-2} + \\sqrt{(1-\\alpha_t\\alpha_{t-1})}\\ast\\epsilon_{t-1}^\\ast \\quad where \\thinspace \\epsilon_{t-1}^\\ast\\in N(0, I) \\cr \u0026= ... \\cr \u0026= \\sqrt{\\bar\\alpha_t}x_0 + \\sqrt{(1 - \\bar\\alpha_t )}\\ast\\epsilon_0^\\ast ; where \\space \\bar\\alpha_t=\\Pi_{i=1}^T{\\sqrt\\alpha_i}, \\space \\epsilon_0^\\ast \\in N(0, I) \\cr \u0026= N(\\sqrt{\\bar\\alpha_t}x_0, (1 - \\bar\\alpha_t)I)\\cr \\end{align} $$ ","permalink":"https://varun-ml.github.io/posts/hugo/tips/","summary":"Opening Links in New page Override default behaviour by adding a render-link.html file under layouts. Follow this page for more details.\nHandle Katex Create a shortcode for katex with {{ .Inner }}. This would ensure all text meant for Katex is not processed. Use shortcode \\{\\{\u0026lt; katex \u0026gt;\\}\\} before any katex code. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 \\{\\{\u0026lt; katex \u0026gt;\\}\\} # remove \\ here $$ \\begin{align} q(x_t|x_0) \u0026amp;= N(\\sqrt\\alpha_tx_{t-1}, (1 - \\alpha_t )I) \\cr \u0026amp;= \\sqrt\\alpha_t x_{t-1} + \\sqrt{(1-\\alpha_t)}\\ast\\epsilon_t \\cr \u0026amp;= \\sqrt\\alpha_t(\\sqrt\\alpha_t x_{t-2} + \\sqrt{(1-\\alpha_{t-1})}\\ast\\epsilon_{t-1}) + \\sqrt(1-\\alpha_t)\\ast\\epsilon_t \\cr \u0026amp;= \\sqrt\\alpha_t\\sqrt\\alpha_t x_{t-2} + \\sqrt\\alpha_t\\sqrt{(1-\\alpha_{t-1})}\\ast\\epsilon_{t-1} + \\sqrt(1-\\alpha_t)\\ast\\epsilon_t \\cr \u0026amp;= \\sqrt\\alpha_t\\sqrt\\alpha_tx_{t-2} + \\sqrt{(1-\\alpha_t\\alpha_{t-1})}\\ast\\epsilon_{t-1}^\\ast \\quad where \\thinspace \\epsilon_{t-1}^\\ast\\in N(0, I) \\cr \u0026amp;= .","title":"Tips and tricks for hugo"},{"content":" Notebook Github Link Colab Co;here Research Scholar Assignment Github ","permalink":"https://varun-ml.github.io/posts/cohere/cohere-research-scholar/","summary":" Notebook Github Link Colab Co;here Research Scholar Assignment Github ","title":"Cohere Research Scholar Notebook"},{"content":"Q. What will I be writing about?\nA. I will be writing about topics that I come across in my daily life as a student of Machine Learning. I am hoping to work more on:\nTransformers JAX and Haiku Search and Personalization Semi Supervised Learning Will perhaps write on some of the other things that I am learning \u0026ndash;\nMarkdown Hugo Q. How can you follow me?\nA. I am most active on Twitter @varuntul22.\n","permalink":"https://varun-ml.github.io/faq/","summary":"faq","title":"Questions"}]