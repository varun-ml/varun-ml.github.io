<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>jupyter on wity&#39;ai</title>
    <link>https://varun-ml.github.io/tags/jupyter/</link>
    <description>Recent content in jupyter on wity&#39;ai</description>
    <image>
      <url>https://varun-ml.github.io/images/varun.png</url>
      <link>https://varun-ml.github.io/images/varun.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 09 Dec 2022 11:28:30 +0530</lastBuildDate><atom:link href="https://varun-ml.github.io/tags/jupyter/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Denoising Diffusion Models Part 1: Estimating True Distribution</title>
      <link>https://varun-ml.github.io/posts/diffusion-models/denoising-diffusion-models-1/</link>
      <pubDate>Fri, 09 Dec 2022 11:28:30 +0530</pubDate>
      
      <guid>https://varun-ml.github.io/posts/diffusion-models/denoising-diffusion-models-1/</guid>
      <description>Code for this blog post: Notebook Github Link Colab Basic: Predicting Original Distribution Vanilla Implementation What are Denoising Diffusion Models? Denoising Diffusion Models, commonly referred to as &amp;ldquo;Diffusion models&amp;rdquo;, are a class of generative models based on the Variational Auto Encoder (VAE) architecture. These models are called likelihood-based models because they assign a high likelihood to the observed data samples $p(X)$. In contrast to other generative models, such as GANs, which learn the sampling process of a complex distribution and are trained adversarially.</description>
      <content:encoded><![CDATA[<h2 id="code-for-this-blog-post">Code for this blog post:</h2>
<table>
<thead>
<tr>
<th style="text-align:left">Notebook</th>
<th style="text-align:left">Github Link</th>
<th style="text-align:left">Colab</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Basic: Predicting Original Distribution</td>
<td style="text-align:left"><a href="https://github.com/varun-ml/diffusion-models-tutorial/blob/master/toy-density-estimation/vanilla_diffusion_model.ipynb" target="_blank" >Vanilla Implementation</a></td>
<td style="text-align:left"><a href="https://colab.research.google.com/github/varun-ml/diffusion-models-tutorial/blob/master/toy-density-estimation/colab_vanilla_diffusion_model.ipynb" target="_blank" >
  <img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Colab (Large)">
</a></td>
</tr>
</tbody>
</table>
<h2 id="what-are-denoising-diffusion-models">What are Denoising Diffusion Models?</h2>
<p>Denoising Diffusion Models, commonly referred to as &ldquo;<strong>Diffusion models</strong>&rdquo;, are a class of generative models based on the <strong>Variational Auto Encoder</strong> (VAE) architecture. These models are called <em>likelihood-based models</em> because they assign a high likelihood to the observed data samples $p(X)$. In contrast to other <em>generative models</em>, such as GANs, which learn the sampling process of a complex distribution and are trained adversarially.</p>
<p>These models are currently the State of the art for image generation. Images generated by diffusion models are photo-realistic, we can even tell the model to generate objects by giving it prompts. Diffusion models can be used to generate distributions coming from non-image domains and have been successfully applied in <cite>speech<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></cite>, NLP, time-series modelling etc. <cite>Survey of Applications <sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></cite> discusses various other areas in which diffusion models have been used.</p>
<h3 id="vaes">VAE&rsquo;s</h3>
<p>Let&rsquo;s spend a bit of time on VAEs, as it will help with some intuition. VAEs are unsupervised models that are used to learn a latent representation for an input. It&rsquo;s an auto-encoder.
VAEs are composed of two processes: an <strong>encoder</strong> ($q$) (also referred to as the inference model), which generates a latent representation ($z$) of the input data ($x_0$), and a <strong>decoder</strong> ($p$) (also referred to as the generator), which generates the input data ($\hat x_0$) using the latent representation ($z$) as input. The encoder and decoder are trained together using a <em>variational objective</em>, referred to as the <em>ELBO</em>(Evidence Lower Bound). ELBO is a lower bound of the data likelihood $p(X)$.</p>
<figure>
    <img loading="lazy" src="/images/vae-max.png"
         alt="Figure 1: An architecture for a Variational Auto Encoder. (Image source: VAE tutorial, Kingma et.al; 2019)" width="100%"/> <figcaption>
            <p>Figure 1: An architecture for a Variational Auto Encoder. (Image source: <a href="https://arxiv.org/abs/1906.02691" target="_blank" >VAE tutorial, Kingma et.al; 2019</a>)</p>
        </figcaption>
</figure>

<figure class="align-center ">
    <img loading="lazy" src="/images/vae-graphical-representation.png#center"
         alt="Figure 2: Graphical representation of a Variational Auto Encoder. The $p$ function is the decoder and the $q$ function is the encoder. (Image source: Calvin Luo; 2022)" width="50%"/> <figcaption>
            <p>Figure 2: Graphical representation of a Variational Auto Encoder. The $p$ function is the decoder and the $q$ function is the encoder. (Image source: <a href="https://arxiv.org/abs/2208.11970" target="_blank" >Calvin Luo; 2022</a>)</p>
        </figcaption>
</figure>

<p>Figures 1 &amp; 2 give a simplistic representation of a VAE model.</p>
<h3 id="denoising-diffusion-models">Denoising Diffusion Models</h3>
<p>Analogous to VAEs, Denoising Diffusion models also consist of two processes: <strong>Diffusion</strong>, which is analogous to the VAE encoder, and <strong>Denoising</strong>, which is analogous to the VAE decoder.</p>
<ul>
<li><strong>Diffusion</strong>: The diffusion process repeatedly samples random noise and corrupts our input data by adding the noise in $T$ steps. In contrast to the VAE encoder, we typically do not learn this process. At the end of diffusion, at step $T$, the data would be so corrupted that it&rsquo;s just noise $N(0, I)$.</li>
</ul>
<figure>
    <img loading="lazy" src="/images/diffusion-z.png"
         alt="Figure 3: Illustration of the Diffusion Process. Image of &amp;lsquo;Z&amp;rsquo; char is corrupted step by step." width="100%"/> <figcaption>
            <p>Figure 3: Illustration of the Diffusion Process. Image of &lsquo;Z&rsquo; char is corrupted step by step.</p>
        </figcaption>
</figure>

<ul>
<li><strong>Denoising</strong>: The denoising is done by a learned model that takes <em>completely noisy data</em> and tries to generate the input data by repeatedly (over $t$ steps: $1$ to $T$) removing noise from the noisy data.
<figure>
    <img loading="lazy" src="/images/denoising-z.png"
         alt="Figure 4: Illustration of the Denoising Process. Image of &amp;lsquo;Z&amp;rsquo; character is generated step by step." width="100%"/> <figcaption>
            <p>Figure 4: Illustration of the Denoising Process. Image of &lsquo;Z&rsquo; character is generated step by step.</p>
        </figcaption>
</figure>
</li>
</ul>
<p>These models are able to generate images from pure noise.</p>
<blockquote>
<p>Humans paint, they are able to generate images in a stepwise manner by painting on a blank canvas. Diffusion models are similar, they generate images in a stepwise manner by <em>denoising</em> a noisy canvas.</p>
</blockquote>
<p>At this point, it may be helpful to look at the different models for generative modelling.</p>
<figure>
    <img loading="lazy" src="/images/generative_models.png"
         alt="Comparing different generative models. (Image source: Diffusion Models tutorial, Cao et.al; 2022)" width="100%"/> <figcaption>
            <p>Comparing different generative models. (Image source: <a href="https://arxiv.org/abs/2209.02646" target="_blank" >Diffusion Models tutorial, Cao et.al; 2022</a>)</p>
        </figcaption>
</figure>

<h2 id="introduction-to-this-series">Introduction to this series</h2>
<p>I have spent too much time understanding diffusion models, which started with some wild posts I saw on Twitter.</p>

  <blockquote class="twitter-tweet" data-dnt="true"><p lang="en" dir="ltr">Introducing Imagen, a new text-to-image synthesis model that can generate high-fidelity, photorealistic images from a deep level of language understanding. Learn more and and check out some examples of <a href="https://twitter.com/hashtag/imagen?src=hash&amp;ref_src=twsrc%5Etfw">#imagen</a> at <a href="https://t.co/RhD6siY6BY">https://t.co/RhD6siY6BY</a> <a href="https://t.co/C8javVu3iW">pic.twitter.com/C8javVu3iW</a></p>&mdash; Google AI (@GoogleAI) <a href="https://twitter.com/GoogleAI/status/1529165219997528064?ref_src=twsrc%5Etfw">May 24, 2022</a></blockquote>

<figure class="align-center ">
    <img loading="lazy" src="/images/diffusion-01.jpg#center"
         alt="Imagen Google AI Diffusion model. (Image source: Imagen Web Link)" width="60%"/> <figcaption>
            <p>Imagen Google AI Diffusion model. (Image source: <a href="https://imagen.research.google/" target="_blank" >Imagen Web Link</a>)</p>
        </figcaption>
</figure>

<p>My curiosity led to experiments, which enriched my ML skill-set. In this series, I will try to demystify some magic behind diffusion models. 
  <blockquote class="twitter-tweet" data-dnt="true"><p lang="en" dir="ltr">Finally read a tutorial on Diffusion models. Now, I understand how they work just not why they work. To me it&#39;s crazy that they do. <a href="https://t.co/LXm5OrD993">pic.twitter.com/LXm5OrD993</a></p>&mdash; Varun Tulsian (@varuntul22) <a href="https://twitter.com/varuntul22/status/1577715572271611904?ref_src=twsrc%5Etfw">October 5, 2022</a></blockquote>
</p>
<h3 id="diffusion-models-series">Diffusion Models Series</h3>
<p>In this series, I will attempt to simplify diffusion model concepts and provide you with some code that you can easily run on Google Colab or your local Jupyter server. The code requires minimal setup. We will be working on a 2D dataset (generated using scikit-learn) and also the <a href="https://www.tensorflow.org/datasets/catalog/emnist" target="_blank" >EMNIST dataset (28x28x1 images)</a>.</p>
<p>This is the first of 3 posts on diffusion models. You can check all the posts in the <a href="/tags/diffusion-model-series/" >Full Diffusion Model Series</a>. All the code for the diffusion model series is available <a href="/posts/diffusion-models/diffusion-models-notebooks/" >here</a>.</p>
<p>The first 2 parts of the series will focus on setting up the basic concepts and code. You won&rsquo;t need a GPU to run the code. The code is written in PyTorch.</p>
<ul>
<li>
<p><a href="/posts/diffusion-models/denoising-diffusion-models-1" ><strong>Part 1</strong></a>: I will introduce the basics of the denoising approach for the diffusion model. We will predict the original distribution directly, following the <cite>first part of Luo, 2022.<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup></cite></p>
</li>
<li>
<p><a href="/posts/diffusion-models/denoising-diffusion-models-2" ><strong>Part 2</strong></a>: I will introduce optimizations, predicting error distribution, time step embedding Aka <cite>Attention is all you need<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup></cite>, that have been shown to work better. We will also look at class conditioned guidance (<em>classifier free guidance</em>) and steps to generate distributions faster using <em>striding</em>. This will correspond to the <cite>second part (Three Equivalent Interpretations) of Luo, 2022.<sup id="fnref1:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> </cite></p>
</li>
</ul>
<ul>
<li><a href="/posts/diffusion-models/denoising-diffusion-models-3" ><strong>Part 3</strong></a>: In the last part of the series, we will be using the concepts learned to implement diffusion models for character generation by training a U-Net model over the <a href="https://www.tensorflow.org/datasets/catalog/emnist" target="_blank" >Extended-MNIST dataset</a>. The code is written in <a href="https://jax.readthedocs.io/" target="_blank" >JAX</a>, <a href="https://dm-haiku.readthedocs.io/" target="_blank" >Haiku</a>. This may serve as a good introduction to Jax and Haiku for the uninitiated.</li>
</ul>
<p>In addition, I have also curated a list of high-quality blogs that I have found helpful, they can be found <a href="/posts/diffusion-models/bonus-denoising-diffusion-models-resources/" >here</a>.</p>
<h2 id="what-are-diffusion-models">What are Diffusion Models?</h2>
<p>Let&rsquo;s go over this again, this time in a little more detail. We will start seeing mathematical equations and PyTorch code below.</p>
<figure class="align-center ">
    <img loading="lazy" src="/images/diffusion-graphical-representation.png#center"
         alt="Figure 5: Graphical representation of a Denoising Diffusion Model. The decoder is the $p$ function, the encoder is the $q$ function. (Image source: Calvin Luo; 2022)" width="80%"/> <figcaption>
            <p>Figure 5: Graphical representation of a Denoising Diffusion Model. The decoder is the $p$ function, the encoder is the $q$ function. (Image source: <a href="https://arxiv.org/abs/2208.11970" target="_blank" >Calvin Luo; 2022</a>)</p>
        </figcaption>
</figure>

<p>Denoising Diffusion models are a Markovian Hierarchical Variational Auto Encoder, unlike a standard VAE model the encoder process (diffusion) and the decoder process (denoising) occur in multiple steps.
Figure 5 depicts the diffusion process ($q$), which begins with a random variable $x$ and generates random variables $x_t$ at the $t^{th}$ step. The denoising process ($p$) starts at $x_T$ and attempts to generate $\hat x_t$ and ultimately $\hat x_0$. Let&rsquo;s call a step in the Diffusion Process as a <strong>Diffusion Step</strong>, and a step in the  Denoising Process as a <strong>Denoising Step</strong>.</p>
<p>We will be going over the <em>Diffusion Step</em> and the <em>Denoising Step,</em> and the <em>training procedure</em>.  But first, let&rsquo;s build an understanding of what needs to be done to implement such a model.</p>
<p><strong>Training a Denoising Diffusion model</strong></p>
<p>This is the main source of confusion when it comes to understanding diffusion models. From the description above and the analogy with the VAEs, it would seem that training a diffusion model would consist of the following steps.</p>
<ol>
<li>Using some data as an input ($x_0$) from the training data.</li>
<li>Perform a Forward Pass (Diffusion), generating $x_t$&rsquo;s in $T$ steps.</li>
<li>Run the noisy image ($x_T$) to the Backward pass (Denoising) to get $\hat x_0$ in $T$ steps. At each step using a $NN(\hat x_t, t)$ and the output should be $\hat x_{t-1}$.</li>
<li>At the end of the full passes, performing a weight update of the model $NN$ after computing a loss-based $L(x_0, \hat x_0)$.</li>
<li>Repeat steps 1 through 4.</li>
</ol>
<p>This would be a perfectly valid approach, however, we can do much better <span class="emojify">🙈</span>. First, let&rsquo;s investigate the issues with this approach. For every input in our dataset, this approach requires us to go through all the time steps, apply diffusion, and then go through the whole denoising steps. The learning (weight updates) only happen at the end of the both the passes. Training in such a way would be slow, and we would not be able to meaningfully learn anything useful.</p>
<p>Instead, we can show that we can effectively learn the distribution $p(X)$ while just doing the following steps.</p>
<ol>
<li>Using some data as an input ($x_0$) from the training data.
<ul>
<li>Take uniform and random samples of a time variable $t$ ranging from $1,to,T$.</li>
</ul>
</li>
<li>Compute the latent variable $x_t$ in a single step. <a href="/posts/diffusion-models/denoising-diffusion-models-1/#1-diffusion-step" >Refer to the diffusion step section</a>.</li>
<li>Apply the $NN$ model to the noisy image ($x_t$) to obtain $\hat x_t^0$. The result of $NN(\hat x_t, t)$ is $\hat x_t^0$. We will not go over each time step. <a href="/posts/diffusion-models/denoising-diffusion-models-1/#2-denoising-step" >Refer to the denoising step section</a>.</li>
</ol>
<blockquote>
<p>Note about notation: $\hat x_t^0$ is the predicted reconstruction of the input $x_0$ at time step $t$.</p>
</blockquote>
<ol start="4">
<li>Performing a weight update of the model $NN$ after computing a loss $L(x, \hat x_t^0, t)$.</li>
<li>Repeat steps 1 through 4.</li>
</ol>
<p>The proof requires us to reduce the ELBO loss, making use of the Markovian assumption in the diffusion model architecture, and using Monte-Carlo estimates to obtain an equivalent loss. I won&rsquo;t go into details on this proof, please refer <cite>Section: Variational Diffusion Models, equation 100 gives the reduced loss <sup id="fnref2:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup></cite>. Would highly recommend you do.</p>
<p>We have made significant progress, now we don&rsquo;t need to go over the entire forward and backward pass before making an update to the model. This will help speed up training significantly.</p>
<p>When we want to generate a new data from noise, we would still go through the full denoising process as it&rsquo;s helps with the quality of the samples. Generation of new samples through diffusion models is slow. This is an active area of research and various approaches have been proposed to this faster. In my code, I employ <a href="/posts/diffusion-models/denoising-diffusion-models-3/#striding-reducing-steps-needed-for-generation" ><em>time step striding</em></a>, where we take multiple steps at the same time.</p>
<p><strong>Pseudocode:</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-0-1"><a class="lnlinks" href="#hl-0-1"> 1</a>
</span><span class="lnt" id="hl-0-2"><a class="lnlinks" href="#hl-0-2"> 2</a>
</span><span class="lnt" id="hl-0-3"><a class="lnlinks" href="#hl-0-3"> 3</a>
</span><span class="lnt" id="hl-0-4"><a class="lnlinks" href="#hl-0-4"> 4</a>
</span><span class="lnt" id="hl-0-5"><a class="lnlinks" href="#hl-0-5"> 5</a>
</span><span class="lnt" id="hl-0-6"><a class="lnlinks" href="#hl-0-6"> 6</a>
</span><span class="lnt" id="hl-0-7"><a class="lnlinks" href="#hl-0-7"> 7</a>
</span><span class="lnt" id="hl-0-8"><a class="lnlinks" href="#hl-0-8"> 8</a>
</span><span class="lnt" id="hl-0-9"><a class="lnlinks" href="#hl-0-9"> 9</a>
</span><span class="lnt" id="hl-0-10"><a class="lnlinks" href="#hl-0-10">10</a>
</span><span class="lnt" id="hl-0-11"><a class="lnlinks" href="#hl-0-11">11</a>
</span><span class="lnt" id="hl-0-12"><a class="lnlinks" href="#hl-0-12">12</a>
</span><span class="lnt" id="hl-0-13"><a class="lnlinks" href="#hl-0-13">13</a>
</span><span class="lnt" id="hl-0-14"><a class="lnlinks" href="#hl-0-14">14</a>
</span><span class="lnt" id="hl-0-15"><a class="lnlinks" href="#hl-0-15">15</a>
</span><span class="lnt" id="hl-0-16"><a class="lnlinks" href="#hl-0-16">16</a>
</span><span class="lnt" id="hl-0-17"><a class="lnlinks" href="#hl-0-17">17</a>
</span><span class="lnt" id="hl-0-18"><a class="lnlinks" href="#hl-0-18">18</a>
</span><span class="lnt" id="hl-0-19"><a class="lnlinks" href="#hl-0-19">19</a>
</span><span class="lnt" id="hl-0-20"><a class="lnlinks" href="#hl-0-20">20</a>
</span><span class="lnt" id="hl-0-21"><a class="lnlinks" href="#hl-0-21">21</a>
</span><span class="lnt" id="hl-0-22"><a class="lnlinks" href="#hl-0-22">22</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">diffusion</span><span class="p">(</span><span class="n">x_0</span><span class="p">,</span> <span class="n">t</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">	<span class="n">code</span> <span class="n">to</span> <span class="n">add</span> <span class="n">noise</span> <span class="n">to</span> <span class="n">x_0</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">x_i</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">training</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="n">loop</span> <span class="n">until</span> <span class="n">convergence</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="n">pick</span> <span class="n">an</span> <span class="n">image</span> <span class="n">x_0</span> <span class="kn">from</span> <span class="nn">X</span> <span class="p">(</span><span class="n">batch</span> <span class="n">of</span> <span class="n">images</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="n">sample</span> <span class="n">t</span> <span class="kn">from</span> <span class="mi">1</span> <span class="n">to</span> <span class="n">T</span>
</span></span><span class="line"><span class="cl">		<span class="n">x_t</span> <span class="o">=</span> <span class="n">diffusion_step</span><span class="p">(</span><span class="n">x_0</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="n">x_hat_t</span> <span class="o">=</span> <span class="n">NN</span><span class="p">(</span><span class="n">x_t</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">		<span class="n">loss_</span> <span class="o">=</span> <span class="n">loss</span><span class="p">(</span><span class="n">x_0</span><span class="p">,</span> <span class="n">x_hat_t</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="n">update</span><span class="p">(</span><span class="n">NN</span><span class="p">,</span> <span class="n">grad</span><span class="p">(</span><span class="n">loss_</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># generating new data points through denoising steps</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">generate_new_data</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">	<span class="n">sample</span> <span class="n">x_T</span> <span class="kn">from</span> <span class="nn">N</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">I</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">T</span><span class="p">,</span> <span class="mi">1</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">		<span class="c1"># denoising step</span>
</span></span><span class="line"><span class="cl">		<span class="n">x_hat_t</span> <span class="o">=</span> <span class="n">NN</span><span class="p">(</span><span class="n">x_t</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">		<span class="c1"># get x_{t-1}</span>
</span></span><span class="line"><span class="cl">		<span class="n">x_</span><span class="p">{</span><span class="n">t</span><span class="o">-</span><span class="mi">1</span><span class="p">}</span> <span class="o">=</span> <span class="n">func</span><span class="p">(</span><span class="n">x_hat_t</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span> <span class="c1"># refer EQ - 12</span>
</span></span><span class="line"><span class="cl">	<span class="n">x_hat_0</span> <span class="o">=</span> <span class="n">x_0</span>  
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="1-diffusion-step">1. Diffusion Step</h3>
<p>The Diffusion steps add noise to the input vector.<br>
At each time step $t$ in the diffusion process, we sample from the latent variable $x_t$.
One way to do this is the following :

$$
q_t(x_t|x_{t-1}) = N(\sqrt\alpha_tx_{t-1}, (1 - \alpha_t )I)  
$$    

Note: The diffusion process is annotated as $q$.</p>
<p>At each time step, we are only using $\sqrt\alpha$ times the previous signal $x_{t-1}$ and adds additional noise to the data in a way such that the latent variables stay at a similar scale.
We have some additional conditions:</p>
<ul>
<li>$\alpha_t$, $t\in[1, T]$, where $\alpha_t &lt; 1$, <em>the diffusion schedule</em>.</li>
<li>$\alpha_{t-1} &lt; \alpha_t$, as we go along in the diffusion process, we are adding more and more noise.</li>
</ul>
<p>At this point, let me introduce the re-parameterization trick.

$$  
N(\sqrt\alpha_tx_{t-1}, (1 - \alpha_t )I) = \sqrt\alpha_tx_{t-1} + (1 - \alpha_t)*\epsilon \quad with \,\,  \epsilon \sim N(0, I)  
$$  
</p>
<p>The re-paremetarization trick simplifies sampling from a Gaussian distribution. If you want to sample from the diffusion step at $t$, you can simply sample from a standard Gaussian distribution $N(0, I)$ and plug in the mean and variance.
Consider another interesting result: suppose we want to sample from the latent $x_t$ ($q(x_t|x_0)$) directly given only the input $x_0$ without having to do it in $t$ steps. We can do so using the re-parameterization trick.</p>
<p>
$$  
\begin{align} 
q(x_t|x_0) &= N(\sqrt\alpha_tx_{t-1}, (1 - \alpha_t )I) \cr   
&= \sqrt\alpha_t x_{t-1} + \sqrt{(1-\alpha_t)}\ast\epsilon_t \cr   
&= \sqrt\alpha_t(\sqrt\alpha_t x_{t-2} + \sqrt{(1-\alpha_{t-1})}\ast\epsilon_{t-1}) + \sqrt(1-\alpha_t)\ast\epsilon_t \cr  
&= \sqrt\alpha_t\sqrt\alpha_t x_{t-2} + \sqrt\alpha_t\sqrt{(1-\alpha_{t-1})}\ast\epsilon_{t-1} + \sqrt(1-\alpha_t)\ast\epsilon_t \cr   
&= \sqrt\alpha_t\sqrt\alpha_tx_{t-2} + \sqrt{(1-\alpha_t\alpha_{t-1})}\ast\epsilon_{t-1}^\ast \quad where \thinspace \epsilon_{t-1}^\ast\in N(0, I) \cr  
&= ... \cr  
&= \sqrt{\bar\alpha_t}x_0 + \sqrt{(1 - \bar\alpha_t )}\ast\epsilon_0^\ast ; \space where \space \bar\alpha_t=\Pi_{i=1}^T{\sqrt\alpha_i}, \space \epsilon_0^\ast \in N(0, I) \cr  
&= N(\sqrt{\bar\alpha_t}x_0, (1 - \bar\alpha_t)I)\cr 
\end{align}  
$$  
<br>
In equation 5, we have utilized <a href="https://en.wikipedia.org/wiki/Sum_of_normally_distributed_random_variables" target="_blank" >sum of two independent Gaussian random variables.</a><br>
The latent variable $x_t$ follows a Gaussian distribution, its mean is $\sqrt{\bar\alpha_t}x_0$ and variance is $(1 - \bar\alpha_t)$.
The mean is a function of time step $t$ and the input $x_0$, The variance is only a function of the time step.</p>
<p>With this in place, let&rsquo;s put some code together.</p>
<p><strong>The diffusion schedule:</strong> $\alpha$</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-1-1"><a class="lnlinks" href="#hl-1-1"> 1</a>
</span><span class="lnt" id="hl-1-2"><a class="lnlinks" href="#hl-1-2"> 2</a>
</span><span class="lnt" id="hl-1-3"><a class="lnlinks" href="#hl-1-3"> 3</a>
</span><span class="lnt" id="hl-1-4"><a class="lnlinks" href="#hl-1-4"> 4</a>
</span><span class="lnt" id="hl-1-5"><a class="lnlinks" href="#hl-1-5"> 5</a>
</span><span class="lnt" id="hl-1-6"><a class="lnlinks" href="#hl-1-6"> 6</a>
</span><span class="lnt" id="hl-1-7"><a class="lnlinks" href="#hl-1-7"> 7</a>
</span><span class="lnt" id="hl-1-8"><a class="lnlinks" href="#hl-1-8"> 8</a>
</span><span class="lnt" id="hl-1-9"><a class="lnlinks" href="#hl-1-9"> 9</a>
</span><span class="lnt" id="hl-1-10"><a class="lnlinks" href="#hl-1-10">10</a>
</span><span class="lnt" id="hl-1-11"><a class="lnlinks" href="#hl-1-11">11</a>
</span><span class="lnt" id="hl-1-12"><a class="lnlinks" href="#hl-1-12">12</a>
</span><span class="lnt" id="hl-1-13"><a class="lnlinks" href="#hl-1-13">13</a>
</span><span class="lnt" id="hl-1-14"><a class="lnlinks" href="#hl-1-14">14</a>
</span><span class="lnt" id="hl-1-15"><a class="lnlinks" href="#hl-1-15">15</a>
</span><span class="lnt" id="hl-1-16"><a class="lnlinks" href="#hl-1-16">16</a>
</span><span class="lnt" id="hl-1-17"><a class="lnlinks" href="#hl-1-17">17</a>
</span><span class="lnt" id="hl-1-18"><a class="lnlinks" href="#hl-1-18">18</a>
</span><span class="lnt" id="hl-1-19"><a class="lnlinks" href="#hl-1-19">19</a>
</span><span class="lnt" id="hl-1-20"><a class="lnlinks" href="#hl-1-20">20</a>
</span><span class="lnt" id="hl-1-21"><a class="lnlinks" href="#hl-1-21">21</a>
</span><span class="lnt" id="hl-1-22"><a class="lnlinks" href="#hl-1-22">22</a>
</span><span class="lnt" id="hl-1-23"><a class="lnlinks" href="#hl-1-23">23</a>
</span><span class="lnt" id="hl-1-24"><a class="lnlinks" href="#hl-1-24">24</a>
</span><span class="lnt" id="hl-1-25"><a class="lnlinks" href="#hl-1-25">25</a>
</span><span class="lnt" id="hl-1-26"><a class="lnlinks" href="#hl-1-26">26</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">timestepts</span> <span class="o">=</span> <span class="mi">200</span>  
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">## linear schedule  </span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">linear_beta_schedule</span><span class="p">(</span><span class="n">timesteps</span><span class="p">):</span>  
</span></span><span class="line"><span class="cl"> <span class="n">beta_start</span> <span class="o">=</span> <span class="mf">0.0001</span> 
</span></span><span class="line"><span class="cl"> <span class="n">beta_end</span> <span class="o">=</span> <span class="mf">0.02</span> 
</span></span><span class="line"><span class="cl"> <span class="k">return</span> <span class="n">jnp</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="n">beta_start</span><span class="p">,</span> <span class="n">beta_end</span><span class="p">,</span> <span class="n">timesteps</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">## cosine schedule as proposed in https://arxiv.org/abs/2102.09672  </span>
</span></span><span class="line"><span class="cl"><span class="c1">## The cosine schedule is recommened if timesteps &gt;&gt; 200. As it results in a gradual noisification of the input data  </span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">cosine_beta_schedule</span><span class="p">(</span><span class="n">timesteps</span><span class="p">,</span> <span class="n">s</span><span class="o">=</span><span class="mf">0.008</span><span class="p">):</span>  
</span></span><span class="line"><span class="cl"> <span class="n">steps</span> <span class="o">=</span> <span class="n">timesteps</span> <span class="o">+</span> <span class="mi">1</span> 
</span></span><span class="line"><span class="cl"> <span class="n">x</span> <span class="o">=</span> <span class="n">jnp</span><span class="o">.</span><span class="n">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">timesteps</span><span class="p">,</span> <span class="n">steps</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl"> <span class="n">alphas_cumprod</span> <span class="o">=</span> <span class="n">jnp</span><span class="o">.</span><span class="n">cos</span><span class="p">(((</span><span class="n">x</span> <span class="o">/</span> <span class="n">timesteps</span><span class="p">)</span> <span class="o">+</span> <span class="n">s</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="n">s</span><span class="p">)</span> <span class="o">*</span> <span class="n">jnp</span><span class="o">.</span><span class="n">pi</span> <span class="o">*</span> <span class="mf">0.5</span><span class="p">)</span> <span class="o">**</span> <span class="mi">2</span> 
</span></span><span class="line"><span class="cl"> <span class="n">alphas_cumprod</span> <span class="o">=</span> <span class="n">alphas_cumprod</span> <span class="o">/</span> <span class="n">alphas_cumprod</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> 
</span></span><span class="line"><span class="cl"> <span class="n">betas</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">-</span> <span class="p">(</span><span class="n">alphas_cumprod</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span> <span class="o">/</span> <span class="n">alphas_cumprod</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span> 
</span></span><span class="line"><span class="cl"> <span class="k">return</span> <span class="n">jnp</span><span class="o">.</span><span class="n">clip</span><span class="p">(</span><span class="n">betas</span><span class="p">,</span> <span class="mf">0.0001</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">## some handy variables  </span>
</span></span><span class="line"><span class="cl"><span class="n">betas</span> <span class="o">=</span> <span class="n">linear_beta_schedule</span><span class="p">(</span><span class="n">timesteps</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl"><span class="n">alphas</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">betas</span>  
</span></span><span class="line"><span class="cl"><span class="n">alphas_</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">cumprod</span><span class="p">(</span><span class="n">alphas</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl"><span class="n">variance</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">alphas_</span>  
</span></span><span class="line"><span class="cl"><span class="n">sd</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">variance</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">torch.nn.functional</span> <span class="k">as</span> <span class="nn">F</span>
</span></span><span class="line"><span class="cl"><span class="n">alphas_prev_</span> <span class="o">=</span> <span class="n">F</span><span class="o">.</span><span class="n">pad</span><span class="p">(</span><span class="n">alphas_</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span> <span class="s2">&#34;constant&#34;</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Diffusion Step:</strong> Given input data $x_0$, a time step $t$ and a schedule, the diffusion method should return the latent variable $x_t$.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-2-1"><a class="lnlinks" href="#hl-2-1">1</a>
</span><span class="lnt" id="hl-2-2"><a class="lnlinks" href="#hl-2-2">2</a>
</span><span class="lnt" id="hl-2-3"><a class="lnlinks" href="#hl-2-3">3</a>
</span><span class="lnt" id="hl-2-4"><a class="lnlinks" href="#hl-2-4">4</a>
</span><span class="lnt" id="hl-2-5"><a class="lnlinks" href="#hl-2-5">5</a>
</span><span class="lnt" id="hl-2-6"><a class="lnlinks" href="#hl-2-6">6</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># how to add noise to the data  </span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_noisy</span><span class="p">(</span><span class="n">batch</span><span class="p">,</span> <span class="n">timestep</span><span class="p">):</span>  
</span></span><span class="line"><span class="cl"> <span class="c1"># we will use the reparameterization trick </span>
</span></span><span class="line"><span class="cl"> <span class="n">noise_at_t</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">normal</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">std</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="n">batch</span><span class="o">.</span><span class="n">size</span><span class="p">())</span> 
</span></span><span class="line"><span class="cl"> <span class="n">added_noise_at_t</span> <span class="o">=</span> <span class="n">batch</span><span class="o">.</span><span class="n">mul</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">alphas_</span><span class="p">[</span><span class="n">timestep</span><span class="p">]))</span> <span class="o">+</span> <span class="n">noise_at_t</span><span class="o">.</span><span class="n">mul</span><span class="p">(</span><span class="n">sd</span><span class="p">[</span><span class="n">timestep</span><span class="p">])</span> 
</span></span><span class="line"><span class="cl"> <span class="k">return</span> <span class="n">added_noise_at_t</span><span class="p">,</span> <span class="n">noise_at_t</span>  
</span></span></code></pre></td></tr></table>
</div>
</div><p>In Variational Diffusion Models, <cite>Kingma et.al, 2022<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup></cite> propose a way to learn the parameters of the schedule and provide additional insights helpful in understanding diffusion models.</p>
<h3 id="2-denoising-step">2. Denoising Step</h3>
<p>Let&rsquo;s recap, the denoising process ($p$) is responsible to generate synthetic data $\hat x_0$.</p>
<ol>
<li>Start with a completely noisy data, $x_T = N(0, I)$</li>
<li>Perform a Denoising Step:
<ol>
<li>Uses a Neural Network to predict $\hat x_T^0$.</li>
<li>We will use $\hat x_T^0$ to generate the latent $\hat x_{T-1}$.</li>
</ol>
</li>
<li>Repeat step 2 with input $\hat x_{T-1}$ to get $\hat x_{T-2}$ until t=1</li>
</ol>
<p>Refer, our mathematical setup in Figure 5. Let&rsquo;s look at the mathematical form that a denoising step $p(\hat x_t|\hat x_{t+1})$. This is also called the <strong>posterior distribution</strong>.</p>
<p>Because the diffusion process is well-defined, let&rsquo;s work out what a backward transition in the diffusion process:

$$
\begin{align}
q(x_{t-1}|x_{t}) = \frac{q(x_t|x_{t-1})\ast q(x_{t-1}|x_0)}{q(x_t|x_0)}\quad \text{Baye's theorem \&} \, \text{Note: } x_0 = x \cr 
= ... \cr
\varpropto N(x_{t-1};\underbrace{\frac{\sqrt\alpha_t(1-\bar\alpha_{t-1})x_t + \sqrt{\bar\alpha_{t-1}}(1-\alpha_t)x_0}{1-\bar\alpha_t}}_{\mu_q(x_t,x_0)}, \underbrace{\frac{(1-\alpha_t)(1-\bar\alpha_{t-1})}{1-\bar\alpha_t}I}_{\sum_q(t)}) \cr
\end{align} 
$$

For the full derivation please refer <cite>Equation #71; Calvin Luo&rsquo;s tutorial<sup id="fnref3:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup></cite></p>
<p>It is convenient to assume that the denoising step $p(\hat x_{t-1}|\hat x_t)$ also follows a Gaussian distribution like the forward process $q(x_{t-1}|x_{t})$. Note: we don&rsquo;t need to necessarily make this assumption. It&rsquo;s an <a href="https://towardsdatascience.com/the-inductive-bias-of-ml-models-and-why-you-should-care-about-it-979fe02a1a56" target="_blank" >inductive bias</a> that we are adding to the system and helps with the stability of training the model or help the model to converge faster.</p>
<p>We will assume the following:</p>
<ol>
<li>The mean $\mu_{p(x_{t-1}|x_{t})}$ ($\mu_p$ for short) is dependent on the input $x_0$ ($x_0$ is not known in the denoising step), thus the denoising Neural Network is tasked to make a prediction for the $\hat x_t^0$.</li>
<li>The variance is not dependent on the data. We will assume it&rsquo;s fixed and is only a function of the time step, $\sum_{p(x_{t-1}|x_t)} = \sum_q(t)$.</li>
</ol>
<p>This gives us the following equation for the denoising step:

$$
\begin{align}
p(\hat x_{t-1}| \hat x_t) \varpropto N(\hat x_{t-1};\frac{\sqrt\alpha_t(1-\bar\alpha_{t-1})\hat x_t + \sqrt{\bar\alpha_{t-1}}(1-\alpha_t)\hat x_t^0}{1-\bar\alpha_t}, \frac{(1-\alpha_t)(1-\bar\alpha_{t-1})}{1-\bar\alpha_t}I)	
\end{align}
$$
</p>
<blockquote>
<p>As show in <cite>Improved Denoising Diffusion Probabilistic Models.<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup></cite> We could alternatively learn the posterior variance. In this case, we will make the neural network output the variance as well as the mean. If the data is d dimensional, the $NN$ will output 2d dimensions. First d dimensions for the mean, the 2nd d dimensions for the variance.</p>
</blockquote>
<p><strong>Diffusion: With Fixed Variance:</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-3-1"><a class="lnlinks" href="#hl-3-1"> 1</a>
</span><span class="lnt" id="hl-3-2"><a class="lnlinks" href="#hl-3-2"> 2</a>
</span><span class="lnt" id="hl-3-3"><a class="lnlinks" href="#hl-3-3"> 3</a>
</span><span class="lnt" id="hl-3-4"><a class="lnlinks" href="#hl-3-4"> 4</a>
</span><span class="lnt" id="hl-3-5"><a class="lnlinks" href="#hl-3-5"> 5</a>
</span><span class="lnt" id="hl-3-6"><a class="lnlinks" href="#hl-3-6"> 6</a>
</span><span class="lnt" id="hl-3-7"><a class="lnlinks" href="#hl-3-7"> 7</a>
</span><span class="lnt" id="hl-3-8"><a class="lnlinks" href="#hl-3-8"> 8</a>
</span><span class="lnt" id="hl-3-9"><a class="lnlinks" href="#hl-3-9"> 9</a>
</span><span class="lnt" id="hl-3-10"><a class="lnlinks" href="#hl-3-10">10</a>
</span><span class="lnt" id="hl-3-11"><a class="lnlinks" href="#hl-3-11">11</a>
</span><span class="lnt" id="hl-3-12"><a class="lnlinks" href="#hl-3-12">12</a>
</span><span class="lnt" id="hl-3-13"><a class="lnlinks" href="#hl-3-13">13</a>
</span><span class="lnt" id="hl-3-14"><a class="lnlinks" href="#hl-3-14">14</a>
</span><span class="lnt" id="hl-3-15"><a class="lnlinks" href="#hl-3-15">15</a>
</span><span class="lnt" id="hl-3-16"><a class="lnlinks" href="#hl-3-16">16</a>
</span><span class="lnt" id="hl-3-17"><a class="lnlinks" href="#hl-3-17">17</a>
</span><span class="lnt" id="hl-3-18"><a class="lnlinks" href="#hl-3-18">18</a>
</span><span class="lnt" id="hl-3-19"><a class="lnlinks" href="#hl-3-19">19</a>
</span><span class="lnt" id="hl-3-20"><a class="lnlinks" href="#hl-3-20">20</a>
</span><span class="lnt" id="hl-3-21"><a class="lnlinks" href="#hl-3-21">21</a>
</span><span class="lnt" id="hl-3-22"><a class="lnlinks" href="#hl-3-22">22</a>
</span><span class="lnt" id="hl-3-23"><a class="lnlinks" href="#hl-3-23">23</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># fixed posterior variance</span>
</span></span><span class="line"><span class="cl"><span class="n">posterior_variance</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">alphas</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">alphas_prev_</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">alphas</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">generate_data</span><span class="p">(</span><span class="n">denoising_model</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">		<span class="c1"># generating multiple samples at the same time</span>
</span></span><span class="line"><span class="cl">    <span class="n">batch_size_generation</span> <span class="o">=</span> <span class="mi">2048</span><span class="o">*</span><span class="mi">5</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># x_T -- we will start from a Noisy sample</span>
</span></span><span class="line"><span class="cl">    <span class="n">data_noisy</span> <span class="o">=</span>  <span class="n">torch</span><span class="o">.</span><span class="n">normal</span><span class="p">(</span><span class="n">mean</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">std</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">batch_size_generation</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data_noisy</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">/</span><span class="n">batch_size_generation</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">data_in_batch</span> <span class="o">=</span> <span class="n">data_noisy</span><span class="p">[:,</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="n">batch_size_generation</span><span class="p">:(</span><span class="n">n</span><span class="o">*</span><span class="n">batch_size_generation</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">timesteps</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">timestep</span> <span class="o">=</span> <span class="n">timesteps</span><span class="o">-</span><span class="n">t</span>
</span></span><span class="line"><span class="cl">            <span class="n">t_repeated</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">Tensor</span><span class="p">([</span><span class="n">timestep</span><span class="p">])</span><span class="o">.</span><span class="n">repeat</span><span class="p">(</span><span class="n">batch_size_generation</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">data_stacked</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">vstack</span><span class="p">([</span><span class="n">data_in_batch</span><span class="p">,</span> <span class="n">t_repeated</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># x_hat_0 prediction at time t</span>
</span></span><span class="line"><span class="cl">            <span class="n">pred_data</span> <span class="o">=</span> <span class="n">denoising_model</span><span class="p">(</span><span class="n">data_stacked</span><span class="o">.</span><span class="n">T</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># implementing equation above to get x_(t-1) from x_t and x_0</span>
</span></span><span class="line"><span class="cl">            <span class="n">mean_data_1</span> <span class="o">=</span> <span class="n">data_in_batch</span><span class="o">.</span><span class="n">T</span><span class="o">.</span><span class="n">mul</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">alphas</span><span class="p">[</span><span class="n">timestep</span><span class="p">])</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="n">alphas_prev_</span><span class="p">[</span><span class="n">timestep</span><span class="p">])</span><span class="o">/</span><span class="p">(</span><span class="n">variance</span><span class="p">[</span><span class="n">timestep</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">            <span class="n">mean_data_2</span> <span class="o">=</span> <span class="n">pred_data</span><span class="o">.</span><span class="n">mul</span><span class="p">(</span><span class="n">torch</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">alphas_prev_</span><span class="p">[</span><span class="n">timestep</span><span class="p">])</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="n">alphas</span><span class="p">[</span><span class="n">timestep</span><span class="p">])</span><span class="o">/</span><span class="p">(</span><span class="n">variance</span><span class="p">[</span><span class="n">timestep</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">            <span class="n">mean_data</span> <span class="o">=</span> <span class="n">mean_data_1</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">mean_data_2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">posterior_data</span> <span class="o">=</span> <span class="n">posterior_variance</span><span class="p">[</span><span class="n">timestep</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="n">data_in_batch</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">normal</span><span class="p">(</span><span class="n">mean_data</span><span class="p">,</span> <span class="n">torch</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">posterior_data</span><span class="p">))</span><span class="o">.</span><span class="n">T</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">data_in_batch</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="3-training-procedure">3. Training Procedure</h3>
<p>We have just defined the diffusion method in the <a href="/posts/diffusion-models/denoising-diffusion-models-1/#hl-0-1" >pseudocode</a>. Let&rsquo;s define the loss function and the Neural Network.</p>
<h4 id="neural-network">Neural Network:</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-4-1"><a class="lnlinks" href="#hl-4-1"> 1</a>
</span><span class="lnt" id="hl-4-2"><a class="lnlinks" href="#hl-4-2"> 2</a>
</span><span class="lnt" id="hl-4-3"><a class="lnlinks" href="#hl-4-3"> 3</a>
</span><span class="lnt" id="hl-4-4"><a class="lnlinks" href="#hl-4-4"> 4</a>
</span><span class="lnt" id="hl-4-5"><a class="lnlinks" href="#hl-4-5"> 5</a>
</span><span class="lnt" id="hl-4-6"><a class="lnlinks" href="#hl-4-6"> 6</a>
</span><span class="lnt" id="hl-4-7"><a class="lnlinks" href="#hl-4-7"> 7</a>
</span><span class="lnt" id="hl-4-8"><a class="lnlinks" href="#hl-4-8"> 8</a>
</span><span class="lnt" id="hl-4-9"><a class="lnlinks" href="#hl-4-9"> 9</a>
</span><span class="lnt" id="hl-4-10"><a class="lnlinks" href="#hl-4-10">10</a>
</span><span class="lnt" id="hl-4-11"><a class="lnlinks" href="#hl-4-11">11</a>
</span><span class="lnt" id="hl-4-12"><a class="lnlinks" href="#hl-4-12">12</a>
</span><span class="lnt" id="hl-4-13"><a class="lnlinks" href="#hl-4-13">13</a>
</span><span class="lnt" id="hl-4-14"><a class="lnlinks" href="#hl-4-14">14</a>
</span><span class="lnt" id="hl-4-15"><a class="lnlinks" href="#hl-4-15">15</a>
</span><span class="lnt" id="hl-4-16"><a class="lnlinks" href="#hl-4-16">16</a>
</span><span class="lnt" id="hl-4-17"><a class="lnlinks" href="#hl-4-17">17</a>
</span><span class="lnt" id="hl-4-18"><a class="lnlinks" href="#hl-4-18">18</a>
</span><span class="lnt" id="hl-4-19"><a class="lnlinks" href="#hl-4-19">19</a>
</span><span class="lnt" id="hl-4-20"><a class="lnlinks" href="#hl-4-20">20</a>
</span><span class="lnt" id="hl-4-21"><a class="lnlinks" href="#hl-4-21">21</a>
</span><span class="lnt" id="hl-4-22"><a class="lnlinks" href="#hl-4-22">22</a>
</span><span class="lnt" id="hl-4-23"><a class="lnlinks" href="#hl-4-23">23</a>
</span><span class="lnt" id="hl-4-24"><a class="lnlinks" href="#hl-4-24">24</a>
</span><span class="lnt" id="hl-4-25"><a class="lnlinks" href="#hl-4-25">25</a>
</span><span class="lnt" id="hl-4-26"><a class="lnlinks" href="#hl-4-26">26</a>
</span><span class="lnt" id="hl-4-27"><a class="lnlinks" href="#hl-4-27">27</a>
</span><span class="lnt" id="hl-4-28"><a class="lnlinks" href="#hl-4-28">28</a>
</span><span class="lnt" id="hl-4-29"><a class="lnlinks" href="#hl-4-29">29</a>
</span><span class="lnt" id="hl-4-30"><a class="lnlinks" href="#hl-4-30">30</a>
</span><span class="lnt" id="hl-4-31"><a class="lnlinks" href="#hl-4-31">31</a>
</span><span class="lnt" id="hl-4-32"><a class="lnlinks" href="#hl-4-32">32</a>
</span><span class="lnt" id="hl-4-33"><a class="lnlinks" href="#hl-4-33">33</a>
</span><span class="lnt" id="hl-4-34"><a class="lnlinks" href="#hl-4-34">34</a>
</span><span class="lnt" id="hl-4-35"><a class="lnlinks" href="#hl-4-35">35</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">torch</span> <span class="kn">import</span> <span class="n">nn</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">DenoisingModelSequential</span><span class="p">(</span><span class="n">nn</span><span class="o">.</span><span class="n">Module</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">hidden_units</span><span class="o">=</span><span class="mi">32</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">super</span><span class="p">(</span><span class="n">DenoisingModelSequential</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="fm">__init__</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># hidden_units = 32</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">mlp</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Sequential</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">nn</span><span class="o">.</span><span class="n">Linear</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">hidden_units</span><span class="p">),</span> <span class="n">bias</span><span class="o">=</span><span class="kc">True</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">nn</span><span class="o">.</span><span class="n">GELU</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">            <span class="n">nn</span><span class="o">.</span><span class="n">Linear</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">hidden_units</span><span class="p">),</span> <span class="nb">int</span><span class="p">(</span><span class="n">hidden_units</span><span class="o">/</span><span class="mi">2</span><span class="p">),</span> <span class="n">bias</span><span class="o">=</span><span class="kc">True</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">nn</span><span class="o">.</span><span class="n">GELU</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">            <span class="n">nn</span><span class="o">.</span><span class="n">Linear</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">hidden_units</span><span class="o">/</span><span class="mi">2</span><span class="p">),</span> <span class="nb">int</span><span class="p">(</span><span class="n">hidden_units</span><span class="o">/</span><span class="mi">4</span><span class="p">),</span> <span class="n">bias</span><span class="o">=</span><span class="kc">True</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">nn</span><span class="o">.</span><span class="n">GELU</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">            <span class="n">nn</span><span class="o">.</span><span class="n">Linear</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">hidden_units</span><span class="o">/</span><span class="mi">4</span><span class="p">),</span> <span class="nb">int</span><span class="p">(</span><span class="n">hidden_units</span><span class="o">/</span><span class="mi">8</span><span class="p">),</span> <span class="n">bias</span><span class="o">=</span><span class="kc">True</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">nn</span><span class="o">.</span><span class="n">GELU</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">            <span class="n">nn</span><span class="o">.</span><span class="n">Linear</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">hidden_units</span><span class="o">/</span><span class="mi">8</span><span class="p">),</span> <span class="nb">int</span><span class="p">(</span><span class="n">hidden_units</span><span class="o">/</span><span class="mi">16</span><span class="p">),</span> <span class="n">bias</span><span class="o">=</span><span class="kc">True</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">nn</span><span class="o">.</span><span class="n">GELU</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">            <span class="n">nn</span><span class="o">.</span><span class="n">Linear</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">hidden_units</span><span class="o">/</span><span class="mi">16</span><span class="p">),</span> <span class="nb">int</span><span class="p">(</span><span class="n">hidden_units</span><span class="o">/</span><span class="mi">8</span><span class="p">),</span> <span class="n">bias</span><span class="o">=</span><span class="kc">True</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">nn</span><span class="o">.</span><span class="n">GELU</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">            <span class="n">nn</span><span class="o">.</span><span class="n">Linear</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">hidden_units</span><span class="o">/</span><span class="mi">8</span><span class="p">),</span> <span class="nb">int</span><span class="p">(</span><span class="n">hidden_units</span><span class="o">/</span><span class="mi">4</span><span class="p">),</span> <span class="n">bias</span><span class="o">=</span><span class="kc">True</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">nn</span><span class="o">.</span><span class="n">GELU</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">            <span class="n">nn</span><span class="o">.</span><span class="n">Linear</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">hidden_units</span><span class="o">/</span><span class="mi">4</span><span class="p">),</span> <span class="nb">int</span><span class="p">(</span><span class="n">hidden_units</span><span class="o">/</span><span class="mi">2</span><span class="p">),</span> <span class="n">bias</span><span class="o">=</span><span class="kc">True</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">nn</span><span class="o">.</span><span class="n">GELU</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">            <span class="n">nn</span><span class="o">.</span><span class="n">Linear</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">hidden_units</span><span class="o">/</span><span class="mi">2</span><span class="p">),</span> <span class="nb">int</span><span class="p">(</span><span class="n">hidden_units</span><span class="p">),</span> <span class="n">bias</span><span class="o">=</span><span class="kc">True</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">nn</span><span class="o">.</span><span class="n">GELU</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">            <span class="n">nn</span><span class="o">.</span><span class="n">Linear</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">hidden_units</span><span class="p">),</span> <span class="mi">2</span><span class="p">,</span> <span class="n">bias</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span>   
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">mlp</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">x</span>
</span></span><span class="line"><span class="cl">      
</span></span><span class="line"><span class="cl"><span class="n">denoising_model</span> <span class="o">=</span> <span class="n">DenoisingModelSequential</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>The input to the Neural Network is 3-dimensional. We are working with 2d dataset, so $\hat x_t$&rsquo;s is a 2d vector. In this blog post, we are going to pass $t$ as the 3rd dimension, we will pass it as a scalar. In the subsequent posts, we will see how to generate an embedding for a time step and concatenate/fuse it with the input.
The output of the $NN$ needs to be $\hat x_t^0$ which is a 2d vector. <a href="/posts/diffusion-models/denoising-diffusion-models-1/#2-denoising-step" >Refer to the denoising step section</a>.
The $NN$ architecture doesn&rsquo;t really matter. In this case, I&rsquo;ve used a basic Multi Layer Perceptron with <cite>GeLU activation units<sup id="fnref:7"><a href="#fn:7" class="footnote-ref" role="doc-noteref">7</a></sup></cite>.
We will use a U-net architecture for character generation using the EMNIST dataset. <a href="/posts/diffusion-models/denoising-diffusion-models-3/" >Checkout Part 3.</a></p>
<p><strong>Loss Function</strong>: At time step $t$ the loss is defined as follows

$$
Loss(x_0, \hat x_t, t) = 1/2\ast(\frac{\bar\alpha_{t-1}}{1-\bar\alpha_{t-1}} - \frac{\bar\alpha_t}{1-\bar\alpha_t})\ast\mid\mid x_0-\hat x_0^t\mid\mid_2^2
$$


$$
\text{SNR}_t =\frac{\bar\alpha_t}{1-\bar\alpha_t}
$$

SNR stands for Signal to Noise. In the case of the diffusion, the schedule must be chosen such that $SNR_t &lt; SNT_{t-1}$.</p>
<p><strong>Loss:</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-5-1"><a class="lnlinks" href="#hl-5-1">1</a>
</span><span class="lnt" id="hl-5-2"><a class="lnlinks" href="#hl-5-2">2</a>
</span><span class="lnt" id="hl-5-3"><a class="lnlinks" href="#hl-5-3">3</a>
</span><span class="lnt" id="hl-5-4"><a class="lnlinks" href="#hl-5-4">4</a>
</span><span class="lnt" id="hl-5-5"><a class="lnlinks" href="#hl-5-5">5</a>
</span><span class="lnt" id="hl-5-6"><a class="lnlinks" href="#hl-5-6">6</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># instead of the l2 loss, I use the huber loss </span>
</span></span><span class="line"><span class="cl"><span class="c1"># https://pytorch.org/docs/stable/generated/torch.nn.HuberLoss.html</span>
</span></span><span class="line"><span class="cl"><span class="n">loss_func</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">HuberLoss</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">imp_weight</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="mi">2</span> <span class="o">*</span> <span class="p">((</span><span class="n">alphas_prev_</span><span class="p">[</span><span class="n">timestep</span><span class="p">]</span> <span class="o">/</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">alphas_prev_</span><span class="p">[</span><span class="n">timestep</span><span class="p">]))</span> <span class="o">-</span> <span class="p">(</span><span class="n">alphas_</span><span class="p">[</span><span class="n">timestep</span><span class="p">]</span><span class="o">/</span><span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">alphas_</span><span class="p">[</span><span class="n">timestep</span><span class="p">]))))</span>
</span></span><span class="line"><span class="cl"><span class="n">loss_</span> <span class="o">=</span> <span class="n">loss_func</span><span class="p">(</span><span class="n">data_in_batch</span><span class="o">.</span><span class="n">mul</span><span class="p">(</span><span class="n">imp_weight</span><span class="p">),</span> <span class="n">pred_data</span><span class="o">.</span><span class="n">T</span><span class="o">.</span><span class="n">mul</span><span class="p">(</span><span class="n">imp_weight</span><span class="p">))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>In <cite>Variation Diffusion Models<sup id="fnref1:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup></cite>, authors propose using a separate Neural Network to model SNR as a function of $t$.  The Neural Network should be monotonically decreasing. In this setting, we do not need to specify the diffusion schedule, it will be learned along with the diffusion model.</p>
<h2 id="lets-look-at-some-outputs">Let&rsquo;s look at some outputs</h2>
<p>In this blog post, we will play with some 2d data-points.</p>
<p><strong>Generating data set for training:</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-6-1"><a class="lnlinks" href="#hl-6-1">1</a>
</span><span class="lnt" id="hl-6-2"><a class="lnlinks" href="#hl-6-2">2</a>
</span><span class="lnt" id="hl-6-3"><a class="lnlinks" href="#hl-6-3">3</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">samples</span> <span class="o">=</span> <span class="mi">1024</span><span class="o">*</span><span class="mi">128</span>
</span></span><span class="line"><span class="cl"><span class="n">x</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">normal</span><span class="p">(</span><span class="n">mean</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">std</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">samples</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">y</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">normal</span><span class="p">(</span><span class="n">mean</span><span class="o">=</span><span class="mf">0.25</span><span class="o">*</span><span class="n">torch</span><span class="o">.</span><span class="n">ones</span><span class="p">(</span><span class="n">samples</span><span class="p">)</span><span class="o">*</span><span class="n">x</span><span class="o">*</span><span class="n">x</span><span class="p">,</span> <span class="n">std</span><span class="o">=</span><span class="n">torch</span><span class="o">.</span><span class="n">ones</span><span class="p">(</span><span class="n">samples</span><span class="p">)</span><span class="o">*</span><span class="mi">1</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt" id="hl-7-1"><a class="lnlinks" href="#hl-7-1">1</a>
</span><span class="lnt" id="hl-7-2"><a class="lnlinks" href="#hl-7-2">2</a>
</span><span class="lnt" id="hl-7-3"><a class="lnlinks" href="#hl-7-3">3</a>
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">circles</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">datasets</span><span class="o">.</span><span class="n">make_circles</span><span class="p">(</span><span class="mi">1024</span><span class="o">*</span><span class="mi">128</span><span class="p">,</span> <span class="n">noise</span><span class="o">=</span><span class="mf">0.01</span><span class="p">,</span> <span class="n">factor</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">make_moons</span><span class="p">,</span> <span class="n">labels</span> <span class="o">=</span> <span class="n">datasets</span><span class="o">.</span><span class="n">make_moons</span><span class="p">(</span><span class="n">n_samples</span><span class="o">=</span><span class="mi">1024</span><span class="o">*</span><span class="mi">128</span><span class="p">,</span> <span class="n">noise</span><span class="o">=</span><span class="mf">0.01</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">complex_data</span> <span class="o">=</span> <span class="n">numpy</span><span class="o">.</span><span class="n">hstack</span><span class="p">([</span><span class="n">make_moons</span> <span class="o">+</span> <span class="mi">15</span><span class="p">,</span> <span class="n">circles</span> <span class="p">])</span> 
</span></span></code></pre></td></tr></table>
</div>
</div><p>With the code fragments in the blog, you should be able to build your very own diffusion model. You can find the <a href="/posts/diffusion-models/diffusion-models-notebooks" >Jupyter Notebook here</a> in case you need some help.</p>
<p><strong>Training Data compared to Diffusion generated data:</strong></p>
<p>Let&rsquo;s look at data I was able to generate using concepts discussed in this blog.</p>
<figure class="align-center ">
    <img loading="lazy" src="/images/parabola.png#center"
         alt="Figure 6: 2D Parabola vs Diffusion generated." width="80%"/> <figcaption>
            <p>Figure 6: 2D Parabola vs Diffusion generated.</p>
        </figcaption>
</figure>

<figure class="align-center ">
    <img loading="lazy" src="/images/complex.png#center"
         alt="Figure 7: 2D Complex vs Diffusion generated." width="80%"/> <figcaption>
            <p>Figure 7: 2D Complex vs Diffusion generated.</p>
        </figcaption>
</figure>

<figure class="align-center ">
    <img loading="lazy" src="/images/complex-data.gif#center"
         alt="Figure 8: A GIF show-casing the denoising process; We start from complete noise and make small improvements step by step." width="80%"/> <figcaption>
            <p>Figure 8: A GIF show-casing the denoising process; We start from complete noise and make small improvements step by step.</p>
        </figcaption>
</figure>

<p>See you in the <a href="/posts/diffusion-models/denoising-diffusion-models-2" >next part</a>.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Popov et al. 2021 <a href="https://arxiv.org/abs/2105.06337" target="_blank" >Grad-TTS: A Diffusion Probabilistic Model for Text-to-Speech</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Yang et al. 2022 <a href="https://arxiv.org/abs/2209.00796" target="_blank" >Diffusion Models: A Comprehensive Survey of Methods and Applications</a>&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>Calvin Luo; 2019 <a href="https://arxiv.org/abs/2208.11970" target="_blank" >&ldquo;Understanding Diffusion Models: A Unified Perspective&rdquo;</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a>&#160;<a href="#fnref1:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a>&#160;<a href="#fnref2:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a>&#160;<a href="#fnref3:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>Vaswani et al. 2017 <a href="https://proceedings.neurips.cc/paper/2017/file/3f5ee243547dee91fbd053c1c4a845aa-Paper.pdf" target="_blank" >Attention is all you need</a>&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5">
<p>Kingma et al. 2022 <a href="https://arxiv.org/abs/2107.00630" target="_blank" >&ldquo;Variational Diffusion Models&rdquo;</a>&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a>&#160;<a href="#fnref1:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6">
<p>Nichol et al. 2021 <a href="https://arxiv.org/abs/2102.09672" target="_blank" >Improved Denoising Diffusion Probabilistic Models</a>&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:7">
<p>Hendrycks et al. 2016 <a href="https://arxiv.org/abs/1606.08415" target="_blank" >Gelu&rsquo;s</a>&#160;<a href="#fnref:7" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Diffusion Model Jupyter and Colab Notebooks</title>
      <link>https://varun-ml.github.io/posts/diffusion-models/diffusion-models-notebooks/</link>
      <pubDate>Mon, 05 Dec 2022 12:49:17 +0530</pubDate>
      
      <guid>https://varun-ml.github.io/posts/diffusion-models/diffusion-models-notebooks/</guid>
      <description>The code accompanying the tutorials on denoising diffusion models.
Notebook Description GitHub Link Colab Basic: Predicting Original Distribution Introduces Diffusion model concepts with PyTorch Vanilla Implementation Predicting Error and Score Function Diffusion models while predicting error with PyTorch Error / Score Prediction Classifier free Guidance and other improvements Diffusion models with Time Step Embeddings, Classifier Free Guidance, and time step striding to improve sampling from a diffusion model Advanced concepts EMINST Denoising and Conditional generation Working on EMNIST data Colab EMNIST If you have suggestions, please feel free to contribute to GitHub Repo.</description>
      <content:encoded><![CDATA[<p>The code accompanying the tutorials on denoising diffusion models.</p>
<table>
<thead>
<tr>
<th style="text-align:left">Notebook</th>
<th style="text-align:left">Description</th>
<th style="text-align:left">GitHub Link</th>
<th>Colab</th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Basic: Predicting Original Distribution</td>
<td style="text-align:left">Introduces Diffusion model concepts with PyTorch</td>
<td style="text-align:left"><a href="https://github.com/varun-ml/diffusion-models-tutorial/blob/master/toy-density-estimation/vanilla_diffusion_model.ipynb" target="_blank" >Vanilla Implementation</a></td>
<td><a href="https://colab.research.google.com/github/varun-ml/diffusion-models-tutorial/blob/master/toy-density-estimation/colab_vanilla_diffusion_model.ipynb" target="_blank" >
  <img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Colab (Large)">
</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td style="text-align:left">Predicting Error and Score Function</td>
<td style="text-align:left">Diffusion models while predicting error with PyTorch</td>
<td style="text-align:left"><a href="https://github.com/varun-ml/diffusion-models-tutorial/blob/master/toy-density-estimation/errors.diffusion_model_interpretations.ipynb" target="_blank" >Error / Score Prediction</a></td>
<td><a href="https://colab.research.google.com/github/varun-ml/diffusion-models-tutorial/blob/master/toy-density-estimation/colab_errors.diffusion_model_interpretations.ipynb" target="_blank" >
  <img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Colab (Large)">
</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td style="text-align:left">Classifier free Guidance and other improvements</td>
<td style="text-align:left">Diffusion models with Time Step Embeddings, Classifier Free Guidance, and time step striding to improve sampling from a diffusion model</td>
<td style="text-align:left"><a href="https://github.com/varun-ml/diffusion-models-tutorial/blob/master/toy-density-estimation/guidance_free_classifiers.ipynb" target="_blank" >Advanced concepts</a></td>
<td><a href="https://colab.research.google.com/github/varun-ml/diffusion-models-tutorial/blob/master/toy-density-estimation/colab_guidance_free_classifiers.ipynb" target="_blank" >
  <img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Colab (Large)">
</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td style="text-align:left">EMINST Denoising and Conditional generation</td>
<td style="text-align:left">Working on EMNIST data</td>
<td style="text-align:left"><a href="https://github.com/varun-ml/diffusion-models-tutorial/blob/master/emnist-colab-notebooks/colab_EMNIST_conditional.diffusion_model.large.with_batch_norm.ipynb" target="_blank" >Colab EMNIST</a></td>
<td><a href="https://colab.research.google.com/github/varun-ml/diffusion-models-tutorial/blob/master/emnist-colab-notebooks/colab_EMNIST_conditional.diffusion_model.large.with_batch_norm.ipynb" target="_blank" >
  <img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Colab (Large)">
</a><a href="https://colab.research.google.com/github/varun-ml/diffusion-models-tutorial/blob/master/emnist-colab-notebooks/colab_EMNIST_conditional.diffusion_model.ipynb" target="_blank" >
  <img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Colab (Small)">
</a></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>If you have suggestions, please feel free to contribute to <a href="https://www.github.com/varun-ml/diffusion-models-tutorial" target="_blank" >GitHub Repo</a>.</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
